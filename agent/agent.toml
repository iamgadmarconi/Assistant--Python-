name = "Assistant"
model = "gpt-4-turbo-preview"
instructions_file = "instructions.md"


########################################################################################################################################################################################################################


[[tools]]
type = "code_interpreter"


########################################################################################################################################################################################################################


[[tools]]
type = "retrieval"


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getWeather"
description = """
This function retrieves weather information in response to user inquiries. Users may not always ask directly, so it's crucial to infer the intent. For instance, even a question about whether to carry an umbrella implies an inquiry about weather conditions.

Parameters:
    - msg (Optional[str]): This is where you input details about the desired location and time for the weather report, if mentioned by the user. If this information is not specified, use the default, which is the user's current location and time. 

Returns:
    - weather_report: str

        A weather report with information about the weather and user Query. Deliver it in Natural language, round the temperature to the nearest degree. Omit certain details depending on context.

            Example:

                User: 'How's the weather?'

                -> getWeather()

                    You should respond something similar to:
                        -> 'Today is quite sunny with a temperature of 13 degrees. Seems like a good time to take a walk.'

            Example:

                User: 'I wonder if its going to be cloudy tomorrow at 12:00 in Amsterdam.'

                -> getWeather('tomorrow at 12:00 Amsterdam')

                    You should respond something similar to:
                        -> 'It's going to be cloudy tomorrow noon in Amsterdam, with a temperature of 11 degrees. You should bring a coat!'

Examples:
    - A user's indirect question, "Should I take an umbrella today?", implies they're asking about the chance of rain. Here, you infer the current day and location.
    - For a direct question like, "Will it rain tomorrow in Paris?", you should use "tomorrow in Paris" as the parameter.

Using the Function:
    1. Infer the Weather Inquiry: Identify whether the user's question relates to weather conditions, even if not asked directly.
    2. Determine the Details: Extract or infer specific details about the location and time from the user's question. If these are not provided, assume the current time and the user's location.
    3. Execute the Query: Use the determined or inferred details to call the function. For example:
        getWeather('tomorrow at 12:00 Paris')
    or, if no specifics are provided:
        getWeather()

Interpreting and Conveying the Results:
    Understand the Report: The function returns a weather report that includes the temperature (rounded to the nearest degree) and a brief description (e.g., sunny, rainy).
        - Reply Appropriately: Tailor your response based on the context of the user's query. For example, if the inquiry implied concern about rain, focus on precipitation in your reply. Example Replies:
        - For a general inquiry: "The weather is sunny with a temperature of 13 degrees. Great day for an outdoor walk!"
        - For a specific inquiry about potential rain: "It looks like it will be cloudy with occasional rain showers tomorrow in Paris. Carrying an umbrella would be a good idea."

Key Point for LLMS: Always aim to provide weather information in direct response to the user's need, adapting based on the information available and the context of their inquiry.
"""

[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.msg]
type = "string"
description = """
    -msg (Optional[str]): This is where you input details about the desired location and time for the weather report, if mentioned by the user. If this information is not specified, use the default, which is the user's current location and time. 
Examples:
    - A user's indirect question, "Should I take an umbrella today?", implies they're asking about the chance of rain. Here, you infer the current day and location.
    - For a direct question like, "Will it rain tomorrow in Paris?", you should use "tomorrow in Paris" as the parameter.

Usage:
    When calling this function, you should pass a string containing a location and a time (if provided by the user).

        Example:

            User: 'I wonder if its going to be cloudy tomorrow at 12:00 in Amsterdam.'

            -> getWeather('tomorrow at 12:00 Amsterdam')

    If no location or time is specified. The function will default to the User's current location and time.

        Example:

            User: 'How's the weather?'

            -> getWeather()
"""


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getCalendar"
description = """

This function is designed to fetch calendar events in response to both direct and indirect user queries about their schedule. Whether they're wondering if they're free for dinner or asking about their plans for the upcoming weekend, this function helps to provide the necessary information.

Parameters:
    - upto (Optional[str]): Here, input any time specifics mentioned by the user, such as "this evening" or "next week". If the user does not specify a time frame, the function assumes a default period of the next 7 days. 

Returns:
    - calendar_reports: list[str]

            A calendar report with information about the Users calendar events. Deliver it in Natural language. Omit certain details depending on context.

                Example:

                    User: 'Am I free this weekend?'

                    -> getCalendar('this weekend')
                        You should respond something similar to:
                            -> This weekend you have no events scheduled. Enjoy your weekend

                            * In the calendar_reports, you will get events that pertain to the entire period between the current date of the User query, and the weekend, but any events not occuring in the weekend should be ommited, as they are not related to the User query.

                Example:

                    User: 'How's my schedule looking like?'

                    -> getCalendar()

                        -> 'This week you have 3 events: 
                                1. English exam
                                2. Dinner with Bob
                                3. Buy plane tickets
                            Seems like you have a fun week ahead, would you like me to help you prepare for any of these events?'

                            * If there are many events, avoid giving details as the response will be cluttered, instead, ask the User if they would like more details, if so, provide them, additionally, you are encouraged to assist the User for specific events, in the Above example, a good response would offer to assist with preparing for an English exam.

Examples:
    - A user might ask indirectly, "Should I plan something for Saturday?" implying a query about free time over the weekend. Use "this weekend" as the parameter.
    - For more general queries like, "What's my schedule like?" you'll default to getting events for the coming week without specifying a time frame in the parameter.

Using the Function:
    1. Interpret the Inquiry: Determine if the user's query relates to seeking information about their schedule or plans.
    2. Extract Specifics: Identify any specific time frame mentioned in the user's query. If none is provided, prepare to use the function's default setting.
    3. Make the Call: With the derived details, call the function accordingly, for example:
        getCalendar ('next weekend')
    or for a nonspecific inquiry:
        getCalendar ()

Presenting the Results:
    - Process the Report: The function returns a list of calendar events within the specified or assumed time frame.
    - Respond Suitably: Tailor your response to match the query's context. Highlight the information that addresses the user's specific concern or interest.
    Example Responses:
        - For an inquiry about being free: "You have no events scheduled this weekend. Looks like you're all clear for new plans!"
        - For a review of the coming week: "You have a few commitments next week: 1. Monday - Doctor's Appointment, 2. Wednesday - Team Meeting, 3. Friday - Dinner with Sarah. Would you like assistance in preparing for any of these?"

Note for LLMs: Engagement and usefulness go beyond just providing the asked-for information. Offering further assistance based on the user's schedule, like reminder setting or event preparation aid, enhances the interaction.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.upto]
type = "string"
description = """
upto (Optional[str]): Here, input any time specifics mentioned by the user, such as "this evening" or "next week". If the user does not specify a time frame, the function assumes a default period of the next 7 days. 

Examples:
    - A user might ask indirectly, "Should I plan something for Saturday?" implying a query about free time over the weekend. Use "this weekend" as the parameter.
    - For more general queries like, "What's my schedule like?" you'll default to getting events for the coming week without specifying a time frame in the parameter.

Usage: 
    upto: Optional[str]

        When calling this function, you should pass a string containing a time (if provided by the user). 

            Example:

                User: 'Am I free this weekend?'

                -> getCalendar('this weekend')

        If no time is specified. The function will default to providing the calendar events for 7 days.

            Example:

                User: 'How's my schedule looking like?'

                -> getCalendar()
"""


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "readEmail"
description = """
This function is an effective tool for accessing the 5 most recent emails in a user's mailbox. It's crafted to handle both explicit inquiries about new emails and more subtle hints that a user is interested in their latest messages.

Parameters:
    - This function doesn't require any parameters. It's designed to simplify the process of fetching the latest emails, making it user-friendly and straightforward.

Returns:
    email_reports: list[str]

        A email report with information about the Users emails. Deliver it in Natural language. Omit certain details depending on context.

            Example:

                    User: 'Do I have any new mail?'

                    -> readEmails()

                        -> 'Here are your 5 most recent messages: 
                                1. EMAIL 1 Subject
                                2. EMAIL 2 Subject
                                3. EMAIL 3 Subject
                                4. EMAIL 4 Subject
                                5. EMAIL 5 Subject'

                            * Avoid giving details as the response will be cluttered, instead, ask the User if they would like more details, if so, provide them. If the user asks for more details about an email specifically, a good follow up message would include all information for that specific email in the email_reports.
                            
                            * Additionally, you are encouraged to assist the User for specific events in follow up messages. If a user asks for details on a specific email, offer assistance regarding the email body.

                            * If a user asks for details, you can also offer to reply to the email. If the user agrees, refer to the sendEmail function with the sender as recipient.

Using the Function:
    1. Detect the Cue: Understand when a user is seeking information about their emails, whether they ask directly, "What are my new emails?" or more indirectly, such as "I wonder if I got the newsletter." 
    2. Execute the Command: With the understanding that the user is interested in their recent emails, simply call the function:
        readEmails()

Conveying the Information:
    - Upon receiving the email report, which lists the subjects of the 5 most recent emails, it's crucial to present this information in a manner that's both clear and respectful of the user's time:
    - Summarize Concisely: Provide a brief summary of the subjects of the 5 newest emails. For example, "You have new messages regarding A, B, C, D, and E."
    - Inquiry about Specifics: If the user shows interest in a particular email, offer to share more detailed information about it. This encourages an interactive and engaging dialogue.
    Example Response:
        "Here are the subjects of your 5 most recent emails: 
            'Weekly Newsletter', 
            'Special Offer', 
            'Meeting Schedule', 
            'Holiday Plans', 
            'Invoice Details'. 
        Would you like more details on any specific one?"

    - Offer Further Assistance: Depending on the content of the emails, suggest possible follow-up actions. Whether it's replying to an invitation, marking an event on the calendar, or addressing an urgent message, showing proactivity enhances user experience. LLM Tips for a Great User Service:
    
    1. Flexibility: Be prepared to understand both direct and implied requests related to email checks.
    2. Clarity and Brevity: Deliver the email subjects succinctly, avoiding information overload.
    3. Engagement: Encourage further interaction by asking if the user needs more details or assistance with any of the emails.
    4. Action-Oriented: Propose next steps or help based on the email contents, such as replying or scheduling.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "writeEmail"
description = """
This function is designed for composing emails, whether responding to direct requests or inferring the need from a user's query. As a critical step before sending an email, it crafts the email's content ready for review and confirmation.
!!! This function is a prerequisite for the sendEmail function. You should call this function before sending an email. !!!
Parameters:
    - recipients (list[str]): Identify the email's recipient(s). If the user specifies a name instead of an email address, use getContacts to find the correct email. Always ensure you have the recipient's correct address before proceeding.
    Example Usage:
        - Direct request: "Email Alex about the meeting tomorrow."
            writeEmail(['alex@example.com'], 'Meeting Tomorrow', 'Here are the details...')
        - Indirect request: If a user mentions wanting to update someone but only provides a name, fetch the email address through contacts lookup.
    
    - subject (str): This is the email's subject line, clearly indicating the email's purpose.
    
    - body (str): Draft the message body to convey the email's main content. It should be concise, clear, and polite. Adjust the tone based on user preference or context. 
    Example Tone:
        - Formal: "Dear [Name], I hope this message finds you well. Regarding our upcoming project..."
        - Informal (if appropriate): "Hi [Name], hope you're doing great! About the project we discussed..."
    - attachments (Optional[list[str]]): If the user wants to attach files, include paths or descriptions of these attachments.

Returns:
    - email_reports: list[str]

            A string containing the email recipient, subject, body, and attachment paths. Deliver the confirmation message in Natural language, EXACTLY IN THE WAY YOU WILL PASS THESE ATTRIBUTES TO the sendEmail function.
            Keep the mail object in memory for future reference.

                Example:

                        User: 'Write an email to John.Doe@outlook.com about the project, asking if he has any updates, and attach the project plan: project_plan.pdf'

                        -> writeEmail([John.Doe@outlook.com], 'Action Plan for Project', **Body**, [project_plan.pdf])

                            * The body parameter of the email should be composed in a way that is polite and professional unless otherwise specified by the user. Do not be overly verbose.

                            Good example:
                                Good aftenoon John,

                                I hope this message finds you well. I am writing to inquire if you have any updates on the project. I have attached the project plan for your reference.
                            
                            Bad example:

                                Hey John, I need to know if you have any updates on the project. I have attached the project plan.

                            -> email_report: str

                                * Your response should look something like this:
                                    -> Your email to John.Doe@outlook.com has been composed:
                                        Subject: Action Plan for Project
                                        Body: I hope this message finds you well. I am writing to inquire if you have any updates on the project. I have attached the project plan for your reference.
                                        Attachments: project_plan.pdf
                                    
                                    Would you like to send it now?

                                    **IF THE USER AGREES TO SEND THE EMAIL, REFER TO THE sendEmail FUNCTION WITH THE EXACT SAME PARAMETERS AS DISPLAYED TO THE USERS.**

Process Flow:
    1. Understanding the Task: Determine whether the user's intention involves sending an email based on their query.
    2. Gathering Information: Collect details on recipients, subject, body content, and any attachments from the user's message. Use getContacts if necessary.
    3. Composing the Email: Utilize the collected information to call writeEmail effectively, creating a draft that echoes the user's intent and message requirements.

Feedback and Confirmation:
    - Preview to User: Offer the user a concise preview of the email content for their approval. For example, "I've drafted an email to [Recipient] about [Subject]. Here's a brief look at the content:..."
    - Inquire About Sending: Ask the user if they are ready to send the composed email or if any modifications are needed, reinforcing that the message won't be sent without their confirmation.

LLM Tips for Enhanced Assistance:
    - Always prioritize understanding the user's intent, even if it's conveyed indirectly.
    - Ensure clarity and appropriateness in both the email draft and communication with the user.
    - Encourage user review and confirmation to foster a participative and error-free email sending process.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
recipients (list[str]): Identify the email's recipient(s). If the user specifies a name instead of an email address, use getContacts to find the correct email. Always ensure you have the recipient's correct address before proceeding.
Example Usage:
    - Direct request: "Email Alex about the meeting tomorrow."
        writeEmail(['alex@example.com'], 'Meeting Tomorrow', 'Here are the details...')
    - Indirect request: If a user mentions wanting to update someone but only provides a name, fetch the email address through contacts lookup.

Usage:
    recipients: list[str]

        When calling this function, you should pass a list of strings containing the recipients of the email.
        IF A USER PASSES A NAME INSTEAD OF AN EMAIL ADDRESS AS A RECIPIENT, CALL THE getContacts FUNCTION WITH THE NAME AS PARAMETER, AND USE THE EMAIL RETURNED AS RECIPIENT.

            Example:

                User: 'Send an email to John.Doe@outlook.com'

                -> writeEmail([John.Doe@outlook.com], 'Subject', 'Body')

"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): This is the email's subject line, clearly indicating the email's purpose.

Usage: 
    subject: str

        When calling this function, you should pass a string containing the subject of the email.

            Example:

                User: 'Send an email to John Doe about the project'

                -> writeEmail([John Doe], 'Action Plan for Project', 'Body')
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
body (str): Draft the message body to convey the email's main content. It should be concise, clear, and polite. Adjust the tone based on user preference or context. 
Example Tone:
    - Formal: "Dear [Name], I hope this message finds you well. Regarding our upcoming project..."
    - Informal (if appropriate): "Hi [Name], hope you're doing great! About the project we discussed..."
* For all emails, you should compose the body of the email in a way that is polite and professional; do not be overly verbose unless otherwise specified by the user.
Usage:
    body: str

        When calling this function, you should pass a string containing the body of the email.

            Example:

                User: 'Send an email to John Doe about the project'

                -> writeEmail([John Doe], 'Action Plan for Project', Body)
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
attachments (Optional[list[str]]): If the user wants to attach files, include paths or descriptions of these attachments.

Usage
    attachments: Optional[list[str]]

        When calling this function, you should pass a list of strings containing the paths to the attachments of the email.

            Example:

                User: 'Send an email to John Doe about the project, asking if he has any updates, and attach the project plan'

                -> writeEmail([John Doe], 'Subject', 'Body', ['path/to/attachment1', 'path/to/attachment2'])
"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "sendEmail"
description = """
!!!This function is a follow-up to the writeEmail function. You should call this function after the user has confirmed the email draft.!!!
This function is crucial for sending an email once it's been composed and confirmed by the user. It acts as the final step in the email communication process, turning the prepared draft into an actual message delivered to the recipient's inbox.

Parameters:
    - recipients (list(str]): The email addresses of the recipients as provided and confirmed in the writeEmail step. Ensure accuracy to avoid miscommunication.
    - subject (str): The subject line of the email, exactly as confirmed in the writeEmail phase, providing recipients with immediate context about the email's content.
    - body (str): The main content or message of the email, drafted and reviewed for clarity, conciseness, and appropriateness according to the user's needs and tone preferences.
    - attachments (Optional[list[str]]): Any files or documents attached to the email as per the user's instructions during the writeEmail process.

Returns:
    - email_reports: str

            A string containing the status of the sent email.

                Example:

                        User: 'looks good, send it'

                        -> sendEmail([John.Doe@outlook.com], 'Action Plan for Project', **Body**, [project_plan.pdf])

                            * The body parameter of the email should be composed in a way that is polite and professional unless otherwise specified by the user. Do not be overly verbose.

                            'Email sent successfully!'

Procedure:
    1. Verify User Confirmation: Before proceeding, ensure you have explicit approval from the user to send the email. This confirmation typically follows a review of the email draft you've provided.
        - User confirmation can be direct, like "Please send the email," or affirmative, such as "Everything looks good!"
    2. Executing the Send Command: With confirmation secured, call the sendEmail function, utilizing the exact details from the writeEmail function preparation.
        sendEmail([recipient], 'subject', 'body', [attachments])

Communication of Completion:
    - Inform the User: Once the email has been sent, provide the user with a clear confirmation message, such as "Your email to [Recipient] regarding [Subject] has been successfully sent." Best Practices for LLMS:
    - Accuracy Is Key: Ensure all details (recipients, subject, body, attachments) match the user's final review and confirmation to avoid errors. Clear Confirmation Protocol: Always seek and confirm user consent before sending an email, reinforcing trust and control over communication.
    - Prompt and Clear Communication: Quickly inform the user of the successful dispatch of their email, acknowledging the completion of their request.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
recipients (list(str]): The email addresses of the recipients as provided and confirmed in the writeEmail step. Ensure accuracy to avoid miscommunication.
"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject line of the email, exactly as confirmed in the writeEmail phase, providing recipients with immediate context about the email's content.
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
body (str): The main content or message of the email, drafted and reviewed for clarity, conciseness, and appropriateness according to the user's needs and tone preferences.
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
attachments (Optional[list[str]]): Any files or documents attached to the email as per the user's instructions during the writeEmail process.
"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getLocation"
description = """
This function is designed to effortlessly provide the user's current geographical location. It caters to inquiries regarding the user's whereabouts, even if posed indirectly.

Parameters:
    This function is straightforward and does not require any input parameters. Its purpose is singular: to identify and relay the user's current location. 

Returns:
    - location: str

            A string containing the Users current location. Deliver it in Natural language.

                Example:

                    User: 'Where am I?'

                    -> getLocation()

                        -> 'You are currently in Amsterdam, Netherlands'

Usage Scenario:
        Whether a user asks, "Where am I right now?" or makes a related inquiry, like "Can you tell me the nearest coffee shop?", the underlying need is the user's current location. This function addresses such needs directly by providing precise location information. 

Executing the Function:
    To obtain the user's current location, simply invoke the getLocation method without any need for additional input:
        getLocation()

Delivering the Information:
    - Once the location is retrieved, convey this information in a clear, understandable manner. Tailor your response to directly answer the user's query or to facilitate further assistance based on location data. Example Response:
    - Direct question: "You are currently in Amsterdam, Netherlands. How may I assist you further?"
    - Indirect inquiry: If the question suggests seeking nearby amenities, blend in the location information with actionable advice, like "You're in Amsterdam, close to several great coffee shops. Would you like directions to one?"

LLM Tips for Optimizing User Experience:
    1. Contextual Awareness: Recognize both direct and implicit location-related queries to adequately address the user's needs.
    2. Clarity in Communication: Respond with the location information in a straightforward and easily comprehensible manner.
    3. Seamless Integration of Location Data: Use the location information as a springboard for offering further assistance or recommendations, enhancing the user's experience and providing immediate, actionable value.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getDate"
description = """
This function enables you to provide the current date whenever a user expresses a need to know it, whether their request is directly about the date or implicates a need for such information.

Parameters:
    - There are no input parameters required for this function. Its role is to simplify the process of informing the user about the current date, regardless of how the question is posed. 

Returns:
    - date: str

        A string containing the current date. Deliver it in Natural language.

            Example:

                User: 'What time is it?'

                -> getDate()

                    -> 'Its 13:08 right now.'

Identifying User Needs:
    - Stay attuned to queries that may require knowing the current date, even if not asked explicitly. For example, "Do I need an umbrella today?" indirectly inquires about today's date in relation to weather conditions. 

Executing the Function:
    - To address the user's need for the date, invoke the getDate command directly:
        getDate()

Communicating the Date:
    - Upon receiving the current date information, relay it back to the user in natural language, ensuring clarity and direct relevance to the user's initial query. Example Responses:
    - For a direct date inquiry: "Today is October 5th, 2023. Is there anything specific you need for today?"
    - For an implied need: "It's currently sunny on this beautiful morning of October 5th, 2023. You might not need that umbrella after all!"

Best Practices for LLMS:
    1. Intuitive Understanding: Recognize both explicit and indirect inquiries about the current date, accurately identifying the user's underlying questions.
    2. Clear and Relevant Responses: Deliver the date information straightforwardly, tailoring your response to fit the context of the user's request or inferred needs.
    3. Engagement and Assistance: Use the opportunity to engage further by asking if the user needs additional information or help related to the day's date, promoting a more interactive and supportive experience.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "createCalendarEvent"
description = """
This function allows you to compose a calendar event. The user query does not have to be direct. 
THIS IS A PREREQUISITE FUNCTION FOR THE saveCalendarEvent FUNCTION. You should call this function before calling the saveCalendarEvent function.

    :Params:

        subject: str

            When calling this function, you should pass a string containing the title / subject of the event.

                Example:

                    User: 'Create an event for the English exam'

                    * In this example, the user does not pass a start time [obligatory field], so you should call getDate() to get the current date and time and pass that as the start time.

                    -> getDate() -> createCalendarEvent('English exam', '2024-12-12T12:00:00')

        start: str

            When calling this function, you should pass a string containing the start time of the event.

                Example:

                    User: 'Create an event for the English exam next week'

                    -> createCalendarEvent('English exam', 'next week')

            If no start time is passed, you should call getDate() to get the current date and time and pass that as the start time.

                Example:

                    User: 'Create an event for the English exam'

                    -> getDate() -> createCalendarEvent('English exam', '2024-12-12T12:00:00')

        end: str

            When calling this function, if provided by the user, you should pass a string containing the end time of the event.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00'

                    -> createCalendarEvent('English exam', 'one week 12:00', 'one week 14:00')

        location: Optional[str]

            When calling this function, if the user specifies it, you should pass a string containing the location of the event.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> createCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')
        
        recurrence: Optional[bool]

            When calling this function, if requested by the user, you should pass a boolean value indicating if the event is recurring.

                Example:

                    User: 'Create a weekly recurring event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> createCalendarEvent('English exam', '2023-12-12T12:00:00', '2023-12-12T14:00:00', 'University of Amsterdam', True)

    :Returns:

        calendar_reports: str

            A string containing the event title, start time, end time, and location. Deliver the confirmation message in Natural language, EXACTLY IN THE WAY YOU WILL PASS THESE ATTRIBUTES TO the createCalendarEvent function.
            Keep the calendar report in memory for future reference.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> createCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')

                            -> 'Your event for the English exam has been created:
                                    Start: 2024-12-12T12:00:00
                                    End: 2024-12-12T14:00:00
                                    Location: University of Amsterdam
                                    Recurring: No
                                    
                                    Would you like to save it?'

                                    **IF THE USER AGREES TO SAVE THE EVENT
                                    REFER TO THE saveCalendarEvent FUNCTION WITH THE EXACT SAME PARAMETERS AS DISPLAYED TO THE USERS.**

                                    **If the user does not agree to save the event, you should call createCalendarEvent with updated parameters.**
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): Clearly define the event's purpose or title as described by the user. This is a mandatory parameter for creating the event.
If a user does not provide a subject, prompt them for more details or make an educated guess based on the content of the event.

Usage:
    subject: str

                When calling this function, you should pass a string containing the title / subject of the event.

                    Example:

                        User: 'Create an event for the English exam'

                        * In this example, the user does not pass a start time [obligatory field], so you should call getDate() to get the current date and time and pass that as the start time.

                        -> getDate() -> createCalendarEvent('English exam', '2024-12-12T12:00:00')
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
start (str): The start time of the event as inferred from the user's request or explicitly provided. This is a mandatory parameter for creating the event.
If the user does not specify a start time, you should call getDate() to get the current date and time and pass that as the start time as a string.

Usage:
    start: str

        When calling this function, you should pass a string containing the start time of the event.

            Example:

                User: 'Create an event for the English exam next week'

                -> createCalendarEvent('English exam', 'next week')

        If no start time is passed, you should call getDate() to get the current date and time and pass that as the start time.

            Example:

                User: 'Create an event for the English exam'

                -> getDate() -> createCalendarEvent('English exam', '2024-12-12T12:00:00')
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
end (str): Define the event's end time if provided. Similarly, if not specified, consider following up for more precise details or making an educated guess based on common event durations. 

Usage:
    end: str

        When calling this function, if provided by the user, you should pass a string containing the end time of the event.

            Example:

                User: 'Create an event for the English exam in one week from 12:00 to 14:00'

                -> createCalendarEvent('English exam', 'one week 12:00', 'one week 14:00')
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
location (Optional[str]): Include the event's location if mentioned. This adds clarity and usefulness to the event details.

Usage:
    location: Optional[str]

        When calling this function, if the user specifies it, you should pass a string containing the location of the event.

            Example:

                User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                -> createCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
recurrence (Optional[bool]): Acknowledge if the event repeats on a routine basis (e.g., weekly, monthly), which is crucial for events such as meetings, classes, or regular commitments. 

Usage:
    recurrence: Optional[bool]

        When calling this function, if requested by the user, you should pass a boolean value indicating if the event is recurring.

            Example:

                User: 'Create a weekly recurring event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                -> createCalendarEvent('English exam', '2023-12-12T12:00:00', '2023-12-12T14:00:00', 'University of Amsterdam', True)
"""
parameters.required = ["subject", "start"]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "saveCalendarEvent"
description = """
!!! THIS IS A FOLLOWUP FUNCTION FOR THE createCalendarEvent FUNCTION. You should call this function after calling the createCalendarEvent function. !!!
Post user confirmation of an event draft composed via createCalendarEvent, this function finalizes and saves the event in the user's calendar.
### Function: saveCalendarEvent
- **Purpose**: This function is used to finalize and save a calendar event into the user's calendar. It should be called after the user confirms the event details prepared by the createCalendarEvent function.
- **Important**: Execute AFTER the createCalendarEvent function, following user confirmation.

### Parameters:
  - **subject** (str): The title of the event as confirmed by the user.
  - **start** (str): Start time of the event (YYYY-MM-DDTHH:MM:SS format).
  - **end** (Optional[str]): End time of the event (YYYY-MM-DDTHH:MM:SS format).
  - **location** (Optional[str]): Location of the event, if confirmed.
  - **recurrence** (Optional[bool]): True if the event repeats (e.g., daily, weekly); otherwise, False.

### Returns:
  - **calendar_reports** (str): Confirmation message indicating the event's successful creation and saving.

### Using the Function:
  1. **Secure Confirmation**: Ensure the user has reviewed and approved the event draft from writeCalendarEvent. Confirmations like "Yes, save it" indicate readiness to proceed.
  2. **Invoke the Function**: Call this function with the confirmed details:
     ```plaintext
     saveCalendarEvent('subject', 'start', 'end', 'location', recurrence)
     ```

### Communication After Execution:
- Promptly inform the user of the successful event creation, providing a clear and supportive message.
- **Example Response**:
  "Your event 'English exam' has been successfully saved for 2024-12-12 from 12:00 to 14:00 at the University of Amsterdam. Can I assist you further?"

### Best Practices for Effective Use:
  - **Accuracy is Key**: Verify the details match the user's confirmation to avoid scheduling errors.
  - **Clear Confirmation**: Quickly inform the user once the event is saved to ensure satisfaction and confidence.
  - **Offer Further Assistance**: Be ready to help with additional requests or questions related to the event or other needs.

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject displayed in createCalendarEvent. 
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
start (str): The start time displayed in createCalendarEvent
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
end (str): The end time displayed in createCalendarEvent
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
location (Optional[str]): The location displayed in createCalendarEvent
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
recurrence (Optional [bool]): The recurrence status displayed in createCalendarEvent
"""
parameters.required = ["subject", "start"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getContacts"
description = """
!!! This function MUST be called if the User asks to send an email to a contact and uses a name (instead of an email address) as a recipient. In this case, call the function with the passed name, and use the email returned by the function to send the email. !!!


This function is a versatile tool for accessing a user's contacts, whether they're seeking to view their entire contact list or need information about a specific contact. It's particularly crucial when preparing to send emails or when the user's query involves contacts by name rather than by email address.

Parameters:
    - name (Optional[str]): Specify the name of the contact if the user is inquiring about someone specific or intends to send an email to a named recipient. This parameter aids in fetching the exact contact details from the user's contact list. 

Returns:
    contacts: list[str]

        A list of strings containing the Users contacts. Deliver it in Natural language. If a specific contact is requested, the contact report will contain the best matches (above 80% similarity) to the requested name.

            Example:

                User: 'Who are my contacts?'

                -> getContacts()

                    -> 'Your contacts are: 
                            1. John Doe
                            2. Jane Doe
                            3. Bob Smith
                            4. Alice Johnson
                            5. Tom Brown'

Operation Modes:
    1. Retrieving All Contacts: When the user expresses a desire to see their entire contact list, omit the name parameter to call the function:
        getContacts()
    2. Searching for a Specific Contact: If the user mentions a specific individual or asks to send an email to someone by name, include the contact's name as a parameter: 
        getContacts('Contact Name')

Responding to User Requests:
    - Contact List Overview: When presenting the user's contacts, list them in a clear, organized manner. For example: "Your contacts include John Doe, Jane Doe, Bob Smith..."
    - Specific Contact Details: For queries about a specific person, provide the most relevant contact information, focusing on the details necessary for the user's request.

User Interaction and Email Integration:
    - Direct Actions: If the interaction involves sending an email, use the contact details retrieved to populate the recipient field in the email composition step, following with user confirmation before sending. 
    Sequence for Email Actions:
        - Retrieve the target contact's email: getContacts('John Doe').
        - Use the obtained email to compose the message: writeEmail('john.doe@example.com', 'Meeting Schedule', 'Details about the meeting...").
        - Confirm with the user, then send the email accordingly.

LLM Best Practices:
    -Clarity and Confirmation: Ensure clarity in presenting contact information and secure user confirmation when actions involve contact details, especially in email-related tasks. 
    - Adaptability: Be prepared to handle both broad and specific contact inquiries, adapting your approach as needed to provide the most relevant information or action.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.name]
type = "string"
description = """
name (Optional[str]): Specify the name of the contact if the user is inquiring about someone specific or intends to send an email to a named recipient. This parameter aids in fetching the exact contact details from the user's contact list. 
**If multiple matches are found, ask the user to specify the contact further, or provide the best match.**

Usage: 
    name: Optional[str]

        If the user asks for a specific contact, or if the function is called to determine an email recipient, you should pass a string containing the name of the contact.

            Example:

                User: 'Send an email to John Doe'

                -> getContacts('John Doe')

                    !!! You will get a contact report containing an email matching to John Doe. !!!

                    -> writeEmail('john.doe@outlook.com', Subject, Body)

                        -> Request user confirmation

                            -> sendEmail('john.doe@outlook.com', Subject, Body)
"""


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "findFile"
description = """

A helper function to find a file_id by name. ALWAYS CALL THIS FUNCTION BEFORE ATTEMPTING TO OPEN A FILE FOR WHICH THE FILE_ID IS UNCERTAIN. \
USE THE FILE_ID RETURNED BY THIS FUNCTION TO FIND THE FILE IN YOUR FILESYSTEM.
ANY FILE OPERATIONS SHOULD BE PERFORMED USING THE FILE_ID RELATING TO THE FILE QUERIED BY THE USER SHOULD BE RETURNED BY THIS FUNCTION.

Searches for and returns the file_id associated with a given filename. This function
is crucial for safely locating files within the system before any file manipulations
or data analyses are performed. It ensures that operations are conducted on the correct file.

Parameters:
    - filename (str): The name of the file to be located, as specified by the user.

Returns:
    file_id (str): The unique identifier (file_id) for the specified file, enabling it to be found and accessed within the your filesystem.
                    - THIS IS THE ONLY WAY TO LOCATE THE FILE IN YOUR FILESYSTEM.
                    - THIS FUNCTION DOES NOT OPEN THE FILE, IT ONLY RETURNS THE FILE_ID.
                    - THIS OUTPUT SHOULD NOT BE SHOWN TO THE USER.
                    - THIS OUTPUT IS USED AS AN INTERMEDIATE STEP FOR YOUR CODE INTERPRETER

            Example:

                User: 'what was the average revenue for the year 2023 in finance.csv?'

                -> findFile(client=client, asst_id=asst_id, 'finance.csv')

                    -> 'file-O3ERIFyoZTQeZZWqDDwAvPVL'

                    Use this file_id to locate the file in your filesystem.
                    Perform data analysis using built in code-interpreter functions.

Note:
    - This function does not open or modify the file; it solely retrieves its identifier.
    - Always use the file_id returned by this function to access the file for any subsequent operations.

Example:
    - file_id = findFile('finance.csv')
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.filename]
type = "string"
description = """
filename (str): The name of the file to be located, as specified by the user.

Usage:
    filename: str

        When calling this function, you MUST pass a string containing the name of the file the USER wants to use, NOT THE FILE ID's KNOWN TO YOU.
        THE OUTPUT WILL BE THE FILE_ID KNOWN TO YOU.

            Example:

                User: 'what was the average revenue for the year 2023 in 'finance.csv'?'

                -> findFile(client=client, asst_id=asst_id, 'finance.csv')
"""
parameters.required = ["filename"]


[[tools]]
type = "function"
[tools.function]
name = "webText"
description = """
THIS TOOL GIVES YOU THE ABILITY TO ACCESS REAL TIME DATA FROM THE WEB. USE THIS FUNCTION TO GET TEXT FROM A WEBSITE. CALL THIS FUNCTION WHEN THE USER ASKS FOR INFORMATION FROM A WEBSITE, OR IF THE USER ASKS TO SUMMARIZE / EXPLAIN A WEBSITE.
THIS FUNCTION SHOULD ALWAYS BE CALLED BEFORE YOU RESPOND YOU ARE NOT CAPABLE OF ACCESSING REAL TIME DATA. ONLY RESPOND YOU ARE NOT CAPABLE OF ACCESSING REAL TIME DATA IF THIS FUNCTION RETURNS AN ERROR.

Function Purpose and Use Case:
    - The function is designed to fetch and return the **text** content from a specified website URL.
    - It serves to access real-time data from the web, making it possible to retrieve information or summaries directly from websites.
    - This is particularly useful when users request current information from a website or ask for a summary of web content.

When to Call the Function:
    - Call this function whenever there is a need to access real-time data from a website.
    - It should be the first method of attempt in scenarios where the user asks for information that can only be retrieved from a website.
    - Before responding that real-time data access is not possible, attempt to use this function to retrieve the requested information.

Parameters:
    - url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract text from.

Returns:

    text: str

        A string containing the text from the website. Deliver it in Natural language.

            Example:

                User: 'What is the latest news on CNN?'

                -> webText('https://www.cnn.com')

                    -> 'The latest news on CNN is...'

Best Practices:
    - Always ensure the URL passed to the function is valid and points to a reachable website.
    - Handle errors gracefully; if the function cannot fetch the website's content (due to, for example, the website being down or the URL being incorrect), make sure to communicate this issue appropriately.

Example Usage:
    - If a user asks, "What is the latest news on https://www.cnn.com?", you would call the function like so: webText('https://www.cnn.com').
    - The function would then attempt to retrieve the text content from CNN's homepage and return it as a string.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
- url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract text from.

Usage:
    url: str

                When calling this function, you should pass a string containing the URL of the website.

                    Example:

                        User: 'What is the latest news on CNN?'

                        -> webText('https://www.cnn.com')
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webImages"
description = """
Function Purpose and Use Case:
    - The function is designed to fetch and return the **image** content from a specified website URL.
    - It serves to access real-time data from the web, making it possible to retrieve information or summaries directly from websites.
    - This is particularly useful when users request a description or for images of a website.

When to Call the Function:
    - Call this function whenever there is a need to access real-time data from a website, or if the user asks to summarize a website.
    - It should be the first method of attempt in scenarios where the user asks for images that can only be retrieved from a website.

Parameters:
    - url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract images from.

Returns:

    image: str

        A string containing the image from the website. Deliver it in Natural language.

            Example:

                User: 'Show me the latest image on CNN'

                -> webImages('https://www.cnn.com')

                    -> 'The latest image on CNN is...'

Best Practices:
    - Always ensure the URL passed to the function is valid and points to a reachable website.
    - Handle errors gracefully; if the function cannot fetch the website's content (due to, for example, the website being down or the URL being incorrect), make sure to communicate this issue appropriately.

Example Usage:
    - If a user asks, "descirbe the website https://www.cnn.com?", you would call the function like so (among other web utility functions): webImages('https://www.cnn.com').
    - The function would then attempt to retrieve the image content from CNN's homepage and return the url's as a string.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
- url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract images from.

Usage: 
    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'Show me the latest image on CNN'

                -> webImages('https://www.cnn.com')
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webLinks"
description = """
Function Purpose and Use Case:
    - The function is designed to fetch and return **links** from a specified website URL.
    - It serves to access real-time data from the web, making it possible to retrieve information or summaries directly from websites.
    - This is particularly useful when users request a description or for links of a website.
    - This function is useful if a user asks for related information or links from a website.
    - You can use this function to suggest similar or related websites or resources.

When to Call the Function:
    - Call this function whenever there is a need to access real-time data from a website, or if the user asks to summarize a website.
    - Call this function when a user wants related information or links from a website.
    - It should be the first method of attempt in scenarios where the user asks for links that can only be retrieved from a website.

Parameters:
    - url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract links from.

Returns:
    
    links: str

        A string containing the links from the website. Deliver it in Natural language.

            Example:

                User: 'Are there any related links on CNN?'

                -> webLinks('https://www.cnn.com')

                    -> 'The related links on CNN are...'

Best Practices:
    - Always ensure the URL passed to the function is valid and points to a reachable website.
    - Handle errors gracefully; if the function cannot fetch the website's content (due to, for example, the website being down or the URL being incorrect), make sure to communicate this issue appropriately.

Example Usage:
    - If a user asks, "Are there any related links https://www.cnn.com/baltimore-bridge-collapse", you would call the function like so (among other web utility functions): webLinks('https://www.cnn.com/baltimore-bridge-collapse').
    - The function would then attempt to retrieve the links from the website and return the url's as a string.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
- url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract links from.

Usage:

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'What are the latest links on CNN?'

                -> webLinks('https://www.cnn.com')
"""
parameters.required = ["url"]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webMenus"
description = """
Function Purpose and Use Case:
    - The function is designed to fetch and return the **Menus** in a specified website URL.
    - This is particularly useful when users request a description of a website.

When to Call the Function:
    - Call this function if the user asks to summarize or describe a website.
    - Call this function when a user wants to know the menus of a website.

Parameters:
    - url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract menus from.

Returns:
    
    menus: str

        A list of strings containing the menus from the website. Deliver it in Natural language.

            Example:

                User: 'Describe the CNN website'

                -> webMenus('https://www.cnn.com')

                    -> 'The website contains various news articles, a section for videos, and a section for opinion pieces.'

Best Practices:
    - Always ensure the URL passed to the function is valid and points to a reachable website.
    - Handle errors gracefully; if the function cannot fetch the website's content (due to, for example, the website being down or the URL being incorrect), make sure to communicate this issue appropriately.

Example Usage:
    - If a user asks, "descirbe the website https://www.cnn.com?", you would call the function like so (among other web utility functions): webMenus('https://www.cnn.com').
    - The function would then attempt to retrieve the menus in CNN's homepage and return the them as a string.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
- url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract menus from.

Usage:

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'Describe the CNN website'

                -> webMenus('https://www.cnn.com')
                    
                    -> 'The website contains various news articles, a section for videos, and a section for opinion pieces.'
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webForms"
description = """
Function Purpose and Use Case:
    - The function is designed to fetch and return the **Forms** in a specified website URL.
    - This is particularly useful when users request a description of a website.

When to Call the Function:
    - Call this function if the user asks to summarize or describe a website.
    - Call this function when a user wants to know about the forms available on a website.

Parameters:
    - url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract forms from.

Returns:
        
    forms: str

        A list of strings containing the forms from the website. Deliver it in Natural language.

            Example:

                User: 'Are there any forms in https://www.cnn.com?'

                -> webForms('https://www.cnn.com')

                    -> 'The website contains a subscription form, a contact form, and a feedback form.'

Best Practices:
    - Always ensure the URL passed to the function is valid and points to a reachable website.
    - Handle errors gracefully; if the function cannot fetch the website's content (due to, for example, the website being down or the URL being incorrect), make sure to communicate this issue appropriately.
    - Format the forms in a clear and understandable manner for the user.

Example Usage:
    - If a user asks, "are there any forms in https://www.cnn.com?", you would call the function like so (among other web utility functions): webForms('https://www.cnn.com').
    - The function would then attempt to retrieve the forms in CNN's homepage and return the them as a string.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
- url (str): This is the only parameter and should be a string containing the full URL of the website you want to extract forms from.

Usage:

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'Are there any forms in https://www.cnn.com?'

                -> webForms('https://www.cnn.com')
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webQuery"
description = """

A function to query the web using Wolfram Alpha's API.
!!! YOU MUST GENERATE A QUERY BASED ON THE USER'S MESSAGE AND PASS IT TO THIS FUNCTION.!!!
THIS FUNCTION ALLOWS YOU TO RETRIEVE CURRENT DATA FROM THE WEB.
THIS FUNCTION ALLOWS YOU TO RETRIEVE KNOWLEDGE PAST YOUR KNOWLEDGE CUTOFF DATE.

Function Purpose and Use Case:
    - The webQuery function is designed to query the web using Wolfram Alpha's API, enabling access to real-time data and information beyond the agent's knowledge cutoff date.
    - It is particularly useful when users ask for current information, mathematical solutions, scientific data, or other queries that require real-time or up-to-date data.

When to Call the Function:
    - Call this function when the user requests information that is beyond your knowledge cutoff date or requires real-time data.
    - Use this function to retrieve current information, perform mathematical calculations, or access scientific data from Wolfram Alpha's extensive knowledge base.

webQuery understands natural language queries about entities in chemistry, physics, geography, history, art, astronomy, and more.
- webQuery performs mathematical calculations, date and unit conversions, formula solving, etc.
- Convert inputs to simplified keyword queries whenever possible (e.g. convert "how many people live in France" to "France population").
- Send queries in English only; translate non-English queries before sending, then respond in the original language.
- Display image URLs with Markdown syntax: ![URL]
- ALWAYS use this exponent notation: `6*10^14`, NEVER `6e14`.
- `query` must ONLY be a single-line string.
- ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '\\( [expression] \\)' when inline.
- Never mention your knowledge cutoff date; webQuery may return more recent data.
- Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1).
- Use named physical constants (e.g., 'speed of light') without numerical substitution.
- Include a space between compound units (e.g., "Ω m" for "ohm*meter").
- To solve for a variable in an equation with units, consider solving a corresponding equation without units; exclude counting units (e.g., books), include genuine units (e.g., kg).
- If data for multiple properties is needed, make separate calls for each property.
- If a webQuery result is not relevant to the query:
    - If webQuery provides multiple 'Assumptions' for a query, choose the more relevant one(s) without explaining the initial result. If you are unsure, ask the user to choose.
    - Re-send the exact same 'input' with NO modifications, and add the 'assumption' parameter, formatted as a list, with the relevant values.
    - ONLY simplify or rephrase the initial query if a more relevant 'Assumption' or other input suggestions are not provided.
    - Do not explain each step unless user input is needed. Proceed directly to making a better API call based on the available assumptions.

Parameters:
    - query (str): The user's query that you want to send to webQuery. This query should be in English and as specific as possible. If the user asks for a solution or step-by-step instructions for a mathematical problem, the query should be formatted as a mathematical expression in Markdown syntax.


Returns:
    query_results: str

        A string containing the results of the query. Deliver it in Natural language.

            Example:

                User: 'What is the capital of France?'

                -> wolframQuery('capital of France')

                    -> 'The capital of France is Paris.'
Best Practices:
    - Always generate the query based on the user's message or inferred intent.
    - Ensure the query is in English and as specific as possible to retrieve accurate results.
    - Follow the guidelines for formatting mathematical expressions and scientific queries.
    - If the initial result is not relevant, consider the available assumptions and make a new API call with the relevant values.
    - Provide the user with the retrieved information in a clear and concise manner, focusing on the key details of the response.

Example Usage:
    - If a user asks, "What is the capital of France?", you would call the function like so: webQuery('capital of France').
    - The function would then send the query to Wolfram Alpha and return the relevant information to you.


"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.query]
type = "string"
description = """
- query (str): The user's query that you want to send to webQuery. This query should be in English and as specific as possible. If the user asks for a solution or step-by-step instructions for a mathematical problem, the query should be formatted as a mathematical expression in Markdown syntax.

Best Practices:
    - Always generate the query based on the user's message or inferred intent.
    - Ensure the query is in English and as specific as possible to retrieve accurate results.
    - Follow the guidelines for formatting mathematical expressions and scientific queries.
    - If the initial result is not relevant, consider the available assumptions and make a new API call with the relevant values.
    - Provide the user with the retrieved information in a clear and concise manner, focusing on the key details of the response.

webQuery understands natural language queries about entities in chemistry, physics, geography, history, art, astronomy, and more.
- webQuery performs mathematical calculations, date and unit conversions, formula solving, etc.
- Convert inputs to simplified keyword queries whenever possible (e.g. convert "how many people live in France" to "France population").
- Send queries in English only; translate non-English queries before sending, then respond in the original language.
- Display image URLs with Markdown syntax: ![URL]
- ALWAYS use this exponent notation: `6*10^14`, NEVER `6e14`.
- `query` must ONLY be a single-line string.
- ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '\\( [expression] \\)' when inline.
- Never mention your knowledge cutoff date; webQuery may return more recent data.
- Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1).
- Use named physical constants (e.g., 'speed of light') without numerical substitution.
- Include a space between compound units (e.g., "Ω m" for "ohm*meter").
- To solve for a variable in an equation with units, consider solving a corresponding equation without units; exclude counting units (e.g., books), include genuine units (e.g., kg).
- If data for multiple properties is needed, make separate calls for each property.
- If a webQuery result is not relevant to the query:
    - If webQuery provides multiple 'Assumptions' for a query, choose the more relevant one(s) without explaining the initial result. If you are unsure, ask the user to choose.
    - Re-send the exact same 'input' with NO modifications, and add the 'assumption' parameter, formatted as a list, with the relevant values.
    - ONLY simplify or rephrase the initial query if a more relevant 'Assumption' or other input suggestions are not provided.
    - Do not explain each step unless user input is needed. Proceed directly to making a better API call based on the available assumptions.

Usage:

    query: str

        When calling this function, you should pass a string containing the query the user wants to perform on Wolfram Alpha.

            Example:

                User: 'What is the capital of France?'

                In this example, the query is 'capital of France''

                -> wolframQuery('capital of France')

            Example:

                User: 'What are the 10 densest elemental metals?'

                In this example, the query is '10 densest elemental metals'

                -> wolframQuery('10 densest elemental metals')

            The query should be in English and should be as specific as possible.

            If the user asks for a solution or step by step instructions for a mathematical problem, the query should be formatted as a mathematical expression in Markdown syntax.

"""
parameters.required = ["query"]



########################################################################################################################################################################################################################

[[file_bundles]]
bundle_name = "source-code"
src_dir = "../src"
src_globs = ["**/*.py"]
dst_ext = "py"

[[file_bundles]]
bundle_name = "memory"
src_dir = "../agent"
src_globs = ["**/*.json"]
dst_ext = "json" 

[[file_bundles]]
bundle_name = "images"
src_dir = "../files"
src_globs = ["*.png", "*.jpg", "*.jpeg"]
dst_ext = "img"

[[file_bundles]]
bundle_name = "data"
src_dir = "../files"
src_globs = ["*.csv", "*.xlsx"]
dst_ext = "data"