name = "Assistant"
model = "gpt-4-turbo-preview"
instructions_file = "instructions.md"


########################################################################################################################################################################################################################


[[tools]]
type = "code_interpreter"


########################################################################################################################################################################################################################


[[tools]]
type = "retrieval"


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getWeather"
description = """
###Function Purpose###
This function is designed to provide weather reports tailored to user inquiries. Since users might pose their questions in various indirect forms, it's essential for the system to interpret the underlying intent. For instance, a question about the necessity of carrying an umbrella is indirectly inquiring about precipitation chances or weather conditions.

###Parameters###
`msg (Optional[str])`: Input the specifics (location and time) related to the weather inquiry here, if mentioned by the user. Absence of this information defaults to the current location and time.

###Returns###
`weather_report (str)`: A concise and user-friendly weather report including essential information and answering the user query. Ensure temperatures are rounded to the nearest whole number. The depth of detail provided should be tailored to the context of the user's query.

###Usage Examples###
##Indirect Query##
1. User Inquiry: "Should I take an umbrella today?"
2. System Inference: The user is inquiring about rain chances for the current day and location.
3. Function Call: `getWeather()` (defaulting to the current location and time)
4. Example Response: "Today, expect some rain showers with a high of 15 degrees. It would be wise to carry an umbrella."

##Direct Query##
1. User Inquiry: "Will it rain tomorrow in Paris?"
2. System Inference: Direct inquiry about rain in Paris for the next day.
3. Function Call: `getWeather(msg='tomorrow Paris')`
4. Example Response: "Tomorrow in Paris, anticipate rainy conditions with temperatures around 12 degrees. An umbrella is recommended."

###Using the Function###
1. Infer the Weather Inquiry: Recognize if the user's question pertains to weather conditions, whether directly or indirectly.
2. Determine the Details: Derive specific details (time and location) from the user's query. Default to the current location and time if unspecified.
3. Execute the Query: Utilize the determined details to call the function, for example, `getWeather(msg='tomorrow at 12:00 Paris')`, or default to getWeather() if no specifics are provided.

###Presenting Results###
1. Understand the Report: The returned weather report will include temperature (rounded) and a succinct description of the conditions.
2. Reply Appropriately: Craft your response to align with the context of the user's inquiry, especially focusing on elements like precipitation if that was the implicit concern.

###Objectives###
Your primary objective is to deliver weather information that directly addresses the user's needs, adjusting your response to fit the available data and the specific context of their query.
"""

[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.msg]
type = "string"
description = """
###Parameter###
`msg (Optional[str])`: Use this parameter to input specific details about the desired weather report's location and time, as mentioned by the user. In the absence of explicit information, the system defaults to the user's current location and time.

###Parameter Examples###
##Indirect Inquiry##
1. User Inquiry: "Should I take an umbrella today?"
2. System Inference: The question suggests a need to know about precipitation chances for the current day and location.
3. Usage: In such cases, details about the current day and location are inferred and used by default since none are explicitly provided.

##Direct Inquiry##
1. User Inquiry: "Will it rain tomorrow in Paris?"
2. System Inference: This is a straightforward request for precipitation chances in Paris for the following day.
3. Usage: For such direct inquiries, use specific details like "tomorrow in Paris" as the parameter.

###Using the `msg` Parameter###
##For Specified Inquiries##
When a user specifies a time and location in their question, encapsulate these details into a string and pass it as the parameter.
1. User Inquiry: "I wonder if it's going to be cloudy tomorrow at 12:00 in Amsterdam."
2. Function Call: `getWeather(msg='tomorrow at 12:00 Amsterdam')`

##For General Inquiries##
If the user's question does not specify a location or time, the function should utilize the default setting, which is the user's current location and time.
1. User Inquiry: "How's the weather?"
2. Function Call: `getWeather()`

###Guidance###
When utilizing the `msg` parameter, ensure to accurately interpret the user's query, distinguishing between direct and indirect weather-related questions. This nuanced approach allows the function to provide a personalized and contextually relevant weather report, enhancing the user experience.
"""


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getCalendar"
description = """
###Function Overview###
This tool is crafted to retrieve and present calendar events based on direct and indirect user inquiries about their schedule. Whether the user is contemplating dinner plans without knowing their availability or querying about upcoming weekend plans, this function aims to deliver pertinent schedule information succinctly and contextually.

###Parameters###
`upto (Optional[str])`: Input here any mentioned time specifics by the user, such as "this evening" or "next week." Absence of a specified time frame will lead the function to consider the forthcoming 7 days as the default period.

###Returns###
`calendar_reports (list[str])`: A list of natural language statements summarizing calendar events within the specified or default time frame. The delivery of information will tactically omit irrelevant details to maintain clarity and relevance.

###Usage Examples###
##Vague or nonspecific inquiry##
1. User Inquiry: "Am I free this weekend?"
2. System Inference: The user seeks information about their weekend schedule.
3. Function Call: `getCalendar(upto='this weekend')`
4. Example Response: "This weekend, your schedule is clear. Enjoy your free time!"

##General Inquiry##
1. User Inquiry: "What's my schedule looking like?"
2. System Inference: The user seeks an overview of their upcoming events.
3. Function Call: `getCalendar()`
4. Example Response: "You have 3 events lined up this week: an English exam, dinner with Bob, and ticket purchasing for your upcoming trip. It's a week full of varied activities. Do you need help preparing for any of these?"

###Using the Function###
1. Interpret the Inquiry: Ascertain whether the query is about the user's schedule or specific plans.
2. Extract Specifics: Determine any specific time frame mentioned. Default to the next 7 days if no timeframe is provided.
3. Function Call: Utilize the extracted details to perform a query, such as `getCalendar(upto='next weekend')`, or resort to `getCalendar()` for general inquiries.

###Presenting Results###
1. Understand the Report: The function outputs a list of calendar events for the mentioned or default time period.
2. Craft Your Response: Adjust your reply to directly address the user's question. Emphasize schedule insights that most closely align with the user's implied or expressed interest.

###Example Responses###
1. For queries on availability: "This weekend you're all set with no plans. How about exploring something new?"
2. For schedule overviews: "Next week is quite packed for you, with appointments and social engagements. Would you like help organizing or reminders set for any of these events?"

###Objective###
The value of your response extends beyond mere information relay. Enhancing user interaction through offers of further assistance, like setting reminders or helping with event preparations, marks a superior service experience.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.upto]
type = "string"
description = """
###Parameter###
`upto (Optional[str])`: Enter any specific time details mentioned by the user, like "this evening" or "next week". In cases where the user hasn't specified a timeframe, the function automatically assumes the upcoming 7 days as the default period to retrieve calendar events.

###Parameter Usage Examples###
##Indirect Time Inquiry##
Scenario: A user hints at wanting to know their availability for a specific time without directly asking for their schedule, e.g., "Should I plan something for Saturday?"
1. Parameter Input: In response, you would input "Saturday" into the `upto` parameter to focus the query on the weekend's schedule.
2. Function Call: `getCalendar(upto='Saturday')`

##General Time Inquiry##
Scenario: A user poses a broad question about their schedule, such as "What's my schedule like?"
1. User Inquiry: "What's my schedule like?"
2. System Inference: The user seeks an overview of their upcoming events without specifying a timeframe.
3. Parameter Input: For broader inquiries, you do not specify a timeframe in the `upto` parameter. The function then defaults to retrieving events for the next 7 days.
4. Function Call: `getCalendar()`
5. Example Response: "Your schedule for the next week includes a meeting, a doctor's appointment, and a dinner with friends. It's a busy week ahead!"

###Using the `upto` Parameter###
##Specified Time Frame##
When a user provides a clear indication of the time frame they're interested in, encapsulate this detail into a string and pass it to the function.
1. User Inquiry: "Am I free this weekend?"
2. System Inference: The user is seeking information about their weekend schedule.
3. Parameter Input: In this case, you would input "this weekend" into the `upto` parameter.
4. Function Call: getCalendar(upto='this weekend')
5. Example Response: "This weekend, your schedule is clear. Enjoy your free time!"

##Unspecified Time Frame##
If the user's question lacks specific timing details, the function defaults to pulling calendar events for the forthcoming 7 days.
1. User Inquiry: "How's my schedule looking?"
2. System Inference: The user is interested in an overview of their upcoming events without specifying a timeframe.
3. Parameter Input: In such cases, you do not include a timeframe in the `upto` parameter.
4. Function Call: getCalendar()
5. Example Response: "You have 3 events lined up this week: an English exam, dinner with Bob, and ticket purchasing for your upcoming trip. It's a week full of varied activities. Do you need help preparing for any of these?"

###Objectives###
When leveraging the `upto` parameter, it's crucial to interpret the user's input accurately—distinguishing between specific and general schedule inquiries. This approach ensures the calendar event retrieval tool provides meaningful, user-centered information, enhancing the overall user experience."""


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "readEmail"
description = """
###Function Overview###
This tool is designed for retrieving the 5 most recent emails in a user's mailbox. It adeptly handles both straightforward inquiries about new emails and subtler expressions of interest in the latest messages, ensuring user-friendly and efficient access to email information.

###Parameters###
None required. The function is built to streamline the access to recent emails without necessitating any user input parameters, making it straightforward and accessible.

###Returns###
`email_reports (list[str])`: Provides a concise email report listing the subjects of the 5 latest emails in natural language, thoughtfully omitting excessive details to maintain simplicity and relevance.

###Usage Examples###
1. User Inquiry: "Do I have any new mail?"
2. System Inference: The user wants to know about their most recent emails.
3. Parameter Input: No parameters are needed for this function.
4. Function Call: `readEmails()`
5. Example Response: "Here are your 5 most recent emails: [Subjects of the 5 emails]. Would you like more information on any of these?"

*Note: Maintain simplicity in the initial response but offer to provide more details upon request. If a user expresses interest in a specific email, suggest further actions such as replying or offering insights based on the email content.*

###Using the Function###
1. Detect the Cue: Identify when a user is indicating an interest in their emails, whether through direct queries like "What are my new emails?" or indirectly, e.g., "I wonder if I got the newsletter."
2. Execute the Command: Recognizing the user's intent to check their recent emails, proceed to call the function with `readEmails()`.

###Presenting Results###
1. Summarize Concisely: Present a brief overview of the subjects of the 5 newest emails, ensuring clarity and respect for the user's time.
2. Inquiry about Specifics: Should the user express curiosity about a particular email, be ready to offer more detailed information about it, fostering an engaging and interactive dialogue.
3. Offer Further Assistance: Based on the contents of the emails, suggest practical follow-up actions. This proactive approach significantly enhances the user experience.

###Example Response###
"Here are the subjects of your 5 most recent emails: 'Weekly Newsletter', 'Special Offer', 'Meeting Schedule', 'Holiday Plans', 'Invoice Details'. Would you like to delve into any of these further?"

###Objective###
1. Flexibility: Be adaptable in recognizing both explicit and implicit email-related inquiries.
2. Clarity and Brevity: Aim for succinct delivery of email subjects to prevent information overload.
3. Engagement: Invite further interaction by inquiring if the user wishes more detailed insights or assistance with any emails.
4. Action-Oriented: Suggest proactive steps or assistance aligned with the content of the emails, enhancing user engagement and satisfaction.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "writeEmail"
description = """
###Function Overview###
This function facilitates the composition of emails, adeptly responding to both direct commands and inferred user needs. It prepares the content of an email for review and approval before it's sent, serving as a crucial precursor to the sendEmail function.

###!!!IMPORTANT NOTE!!!###:
This function must be utilized prior to sending an email. It is designed to prepare the email content, ensuring accuracy and user consent before dispatch.

###Parameters###
`recipients (list[str])`: Specify the email recipient(s). Utilize `getContacts(name: (str))` for converting names to email addresses to ensure correct recipient identification.
##Example Usage##
#Email address specified#: 
1. User Inquiry: "Email <alex@example.com> about the meeting tomorrow."
2. System Inference: The user intends to contact <alex@example.com> regarding a meeting.
3. Internal Reasoning: 
    A. Use the provided email address directly as the recipient.
    B. Generate a Subject and Body based on the user's request.
3. Parameter Input:
    A. `recipients`: In this case the user provided an email address; the recipient is 'alex@example.com'.
    B. `subject`: You generate a subject based on the user's request; for example, 'Meeting Tomorrow'.
    C. `body`: You compose the email body based on the user's request; for example, 'Hello Alex, I am writing to confirm the meeting scheduled for tomorrow.'
4. Function Call: `writeEmail(recipients=['alex@example.com'], subject=f'{Subject}', body=f'{Body}')`
5. Example Response: "Here is your draft email to Alex: Subject: Meeting Tomorrow. Body: Hello Alex, I am writing to confirm the meeting scheduled for tomorrow. Would you like to send it now?"

#Email address not specified#: 
If only a name is mentioned, ascertain the email address via contact lookup with `getContacts(name: (str))`.
1. User Inquiry: "Email Alex about the meeting tomorrow."
2. System Inference: The user intends to contact Alex regarding a meeting.
3. Internal Reasoning: 
    A. The user provided a name but not an email address.
    B. Use `getContacts(name='Alex')` to fetch the email address for the recipient.
    B. Generate a Subject and Body based on the user's request.
3. Parameter Input:
    A. `recipients: (str)`: In this case the user provided an email address; the recipient is 'alex@example.com', retrieved from `getContacts(name='Alex')`.
    B. `subject: (str)`: You generate a subject based on the user's request; for example, 'Meeting Tomorrow'.
    C. `body: (str)`: You compose the email body based on the user's request; for example, 'Hello Alex, I am writing to confirm the meeting scheduled for tomorrow.'
4. Function Call: `writeEmail(recipients=['alex@example.com'], subject=f'{Subject}', body=f'{Body}')`
5. Example Response: "Here is your draft email to Alex: Subject: Meeting Tomorrow. Body: Hello Alex, I am writing to confirm the meeting scheduled for tomorrow. Would you like to send it now?"
`subject (str)`: Define the email's subject line, succinctly reflecting the purpose of the email.
`body (str)`: Compose the email's main content, ensuring clarity, conciseness, and appropriate politeness. The tone should be adjusted based on context or user preference.
#Example Tone#
Formal: "Dear [Name], I hope this message finds you well. Regarding our upcoming project..."
Informal: "Hi [Name], hope you're doing great! About the project we discussed..."
`attachments (Optional[list[str]])`: Include any requested files as attachments, specifying paths or descriptions as provided by the user.

###Returns###
`email_reports (list[str])`: A string detailing the email's recipient, subject, body, and attachment paths, formatted for user confirmation and prepared exactly as it will be passed to the `sendEmail(recipients: (list[str]), subject: (str), body: (str), attachments: (list[str]))` function. The draft email is kept in memory for future actions.

###Example Usage###
1. User Inquiry: "Write an email to John.Doe@outlook.com about the project, asking if he has any updates, and attach the project plan: project_plan.pdf"
2. System Inference: The user wants to contact 'John.Doe@outlook.com' regarding the project, inquiring about updates and attaching 'project_plan.pdf'.
3. Internal Reasoning: 
    A. The user provided the email address directly.
    B. Generate a Subject and Body based on the user's request.
    C. Attach the specified file exactly as provided.
4. Parameter Input:
    A. `recipients: (str)`: The recipient is `'John.Doe@outlook.com'`.
    B. `subject: (str)`: An example generated subject is: `'Action Plan for Project'`.
    C. `body: (str)`: An example composed body is: `'Hello John, I hope this email finds you well. Do you have any updates on the project?'`.
    D. `attachments: (list[str])`: The attachment is `['project_plan.pdf']`.
5. Function Call: `writeEmail(recipients=['John.Doe@outlook.com'], subject='Action Plan for Project', body=f'{Body}', attachments=['project_plan.pdf'])`
6. Example Response: "Your email to John.Doe@outlook.com has been composed: Subject: Action Plan for Project. Body: Hello John, I hope this message finds you well. I am writing to inquire if you have any updates on the project. I have attached the project plan for your reference. Attachments: project_plan.pdf. Would you like to send it now?"
7. **Listen for user confirmation before proceeding to send the email.**

###Process Flow###
1. Understanding the Task: Identify if the user's request involves composing and potentially sending an email.
2. Gathering Information: Extract details about the recipients, subject, body, and attachments from the user's input, employing `getContacts(name: (str))` as needed.
3. Composing the Email: Use the gathered details to craft the email, aligning with the user's requirements and intentions. Ask for more information if necessary.

###!!!Feedback and Confirmation!!!###
1. Provide a preview of the email draft to the user, asking for their review and confirmation.
2. Inquire if the user wishes to send the email as drafted or requires adjustments, ensuring clear communication and user satisfaction.
3. If the user requires adjustements, call this function again with the updated details.

###Objectives###
1. Prioritize accurate understanding of both direct and indirect user intentions.
2. Ensure the email draft is clear, appropriate, and aligned with the user's preferences.
3. Facilitate a review and confirmation process with the user, promoting an interactive and error-free emailing experience.
4. Ask for clarification or additional details as needed to refine the email content before sending.
5. Call `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` as many times as necessary to finalize the email draft before proceeding to send it.
6. Always seek explicit user confirmation before sending the email to maintain user trust and control over communication.
7. If an email is not specified, and retrieval with `getContacts(name: (str))` is required, ensure the email address is accurately obtained before proceeding with the email composition.
    A. If retrieval is unsuccessful, inform the user and seek alternative contact details.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
###Parameter###
`recipients (list[str])`: This parameter requires the email addresses of the intended recipients. It accommodates direct email addresses. When a user specifies a recipient by name rather than email, employ the `getContacts(name: (str))` function to ascertain the correct email address. Ensuring the accuracy of the recipient's email is paramount for successful email delivery.

###Parameter Usage###
##Direct Email Address##
1. User Inquiry: "Email alex@example.com about the meeting tomorrow."
2. System Inference: The user directly requests emailing 'alex@example.com' about an upcoming meeting.
3. Internal Reasoning: 
    A. The user provided the email address directly.
    B. Generate a Subject and Body based on the user's request.
4. Parameter Input: For explicit email addresses provided by the user, directly pass them as list elements.
    A. `recipients: (list[str])`: In this case, the recipient is 'alex@example.com'.
5. Function Call: writeEmail(recipients=['alex@example.com'], subject='Meeting Tomorrow', body='Here are the details...')
6. Example Response: The email composition tool would then proceed to draft the email with the provided details. Provide the response exactly as recieved, and display it to the user, asking for confirmation or if there are any changes they would like to make.

##Email Address NOT Provied##
1. User Inquiry: "Can you send an update to Jordan?"
2. System Inference: The user wishes to send an email to 'Jordan', but only provides a name, necessitating a lookup for the email address.
3. Internal Reasoning: 
    A. The user provided a name but not an email address.
    B. Use `getContacts(name='Jordan')` to fetch the email address for the recipient.
    C. The user provided a vague request, requiring further details to compose the email.
    D. Prompt the user for additional information, asking for more details about the update.
4. User Response: "The update is regarding the project timeline. Let him know about the delay."
5. Parameter Input: When only a name is provided, use the `getContacts(name)` function with the name to retrieve the corresponding email address.
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts('Jordan')`, which provides the email address.
    B. `subject: (str)`: Generate a subject based on the user's request; for example, 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello Jordan, I wanted to inform you about the delay in the project timeline.'
    D. `attachments: (list[str])`: If any attachments are required, include them as specified by the user. (None in this case)
6. Function Call: Assuming getContacts(name='Jordan') returns 'jordan@example.com', call writeEmail(recipients=['jordan@example.com'], subject='Project Update', body='Hello Jordan, I wanted to inform you about the delay in the project timeline.').
7. Example Response: Here is your draft email to Jordan: Subject: Project Update. Body: Hello Jordan, I wanted to inform you about the delay in the project timeline. Would you like to send it now?
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

###Process flow###
1. Identify Recipient(s): Extract recipient information from the user's request, noting if it is provided as a direct email address or requires lookup.
2. Convert Names to Emails: For names without email addresses, invoke `getContacts(name: (str))` with the provided name to find the correct email address.
    A. If the email address is not found, inform the user and request alternative contact details.
    B. If multiple names are provided, handle each name individually to ensure accurate recipient identification.
3. Prepare Recipient List: Formulate a list of email addresses, now validated or retrieved, as the input for the recipients parameter.
4. Compose and Review: Proceed with the email composition, readying it for user review and subsequent actions.

###Objectives###
1. Prioritize accurate recipient identification to ensure email delivery to the intended party.
2. Facilitate user involvement in the composition process, confirming recipient details as part of drafting the email.
3. This refined instruction set emphasizes clarity and precision in handling recipients for email composition, ensuring the process is both user-friendly and secure.
"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
###Parameter###
`subject (str)`: This parameter specifies the subject line of an email, encapsulating the essence and primary purpose of the message. The subject line should be concise yet descriptive enough to give the recipient a clear understanding of the email's content and importance at a glance.

###Parameter Description###
The subject of an email is crucial for first impressions and can influence whether the email is opened promptly, deferred, or overlooked. It acts as a summary or title for the email content.

###Parameter Usage###
##Subject Provided##
1. User Inquiry: "Email John Doe about the project. The subject should be 'Action Plan for Project'."
2. System Inference: The user intends to contact 'John Doe' regarding a project, specifying the subject as 'Action Plan for Project'.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    A. The user provided the subject directly.
    B. Generate a Body based on the user's request.
4. Parameter Input: For explicit subject lines provided by the user, directly pass them as strings.
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Action Plan for Project'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
    E. The body is vague, prompting the user for more details.
5. User Response: "The project involves the upcoming client presentation. Request feedback by Friday."
6. System Inference: The user provides additional details about the project, specifying the need for feedback by Friday.
7. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is professional
    C. Compose the email body based on the user's request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
8. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Action Plan for Project'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
    D. In this case, no attachments are specified.
9. Function Call: `writeEmail(recipients=['John Doe'], subject='Action Plan for Project', body='Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.')`
10. Example Response: "Here is your draft email to John Doe: Subject: Action Plan for Project. Body: Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

##Subject not Provided##
1. User Inquiry: "Email John Doe about the project."
2. System Inference: The user intends to contact 'John Doe' regarding a project.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    A. The user did not provide a subject.
    B. Generate a Body based on the user's request.
4. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
    E. The body is vague, prompting the user for more details.
5. User Response: "The project involves the upcoming client presentation. Request feedback by Friday."
6. System Inference: The user provides additional details about the project, specifying the need for feedback by Friday.
7. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is professional
    C. Compose the email body based on the user's request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
8. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
    D. In this case, no attachments are specified.
9. Function Call: `writeEmail(recipients=['John Doe'], subject='Project Update', body='Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.')`
10. Example Response: "Here is your draft email to John Doe: Subject: Project Update. Body: Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

###Process flow###
1. Identify Subject Relevance: Determine if the user has provided a subject line for the email.
2. Generate Subject: If the subject is not provided, generate a relevant subject based on the context of the email.
3. Compose the Email: Utilize the subject line and other details to craft the email body, aligning with the user's intentions and tone preferences.
4. Seek User Confirmation: Present the email draft to the user for review and approval before proceeding to send, ensuring accuracy and user consent.

###Objectives###
1. Subject Clarity: Ensure the subject line is clear, concise, and relevant to the email's content.
2. User-Centric: Tailor the subject to the recipient's needs or interests, enhancing engagement.
3. Action-Oriented: Use actionable language in the subject to prompt the recipient to open and respond to the email.
4. Contextual Relevance: Align the subject with the email's main purpose, providing immediate context to the recipient.
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
###Parameter###
`body (str)`: Draft the message body to convey the email's main content. It should be concise, clear, and polite. Adjust the tone based on user preference or context. 

###Parameter Description###
The body parameter is a string that forms the core message of your email. It's essential to articulate the main points clearly, concisely, and with the appropriate level of formality or informality, depending on the recipient and the context of the email. This parameter is versatile, allowing for customization in tone to suit various scenarios—from professional communications to more casual exchanges. It's vital to maintain a polite and respectful tone throughout, ensuring the message is both engaging and professional. While brevity is appreciated, the length and detail of the body can be adjusted according to user specifications or the complexity of the subject matter.

###Parameter Usage###
When utilizing this parameter, input a well-constructed string that effectively communicates your message, keeping in mind the desired tone and the audience's expectations. The body should include all necessary information, structured in a way that is easy to read and understand. Use paragraphs to separate thoughts or topics, and consider including a call to action or a conclusion as appropriate.

##Formal Tone Example##
For professional or official correspondence, use a respectful greeting, clear language, and a structured layout. Example: "Dear [Recipient Name], I am writing to discuss...".
1. User Inquiry: "Email John Doe to confirm tomorrow's meeting."
2. System Inference: The user intends to contact 'John Doe' to confirm tomorrow's meeting.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    C. The user did not provide a subject.
    D. Infer the tone based on the context: Confirming a meeting typically relates to work: requires a professional tone.
    E. Generate a Body based on the user's request.
4. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Meeting Confirmation'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
5. Function Call: `writeEmail(recipients=['John Doe'], subject='Meeting Confirmation', body='Hello John, I am writing to confirm the meeting scheduled for tomorrow.')`
6. Example Response: "Here is your draft email to John Doe: Subject: Meeting Confirmation. Body: Hello John, I am writing to confirm the meeting scheduled for tomorrow. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

##Informal Tone Example##
For emails to friends or colleagues you have a casual relationship with, a more relaxed greeting and conversational language can be used. Example: "Hey [Recipient Name], just wanted to chat about...".
1. User Inquiry: "Email Alex asking if he wants to get lunch this weekend."
2. System Inference: The user intends to contact 'Alex' to inquire about lunch plans for the weekend.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='Alex')` to retrieve the email address.
    C. The user did not provide a subject.
    D. Infer the tone based on the context: Lunch plans are casual and friendly: requires an informal tone.
    E. Generate a Body based on the user's request.
    F. Lunch plans require a specific timeframe: prompt the user for more details.
4. User Response: "I'm free on Saturday at 13:00. Let's meet at McDonalds in Delft Center."
5. System Inference: The user provides specific details for the lunch meeting, suggesting Saturday at 13:00 at McDonalds in Delft Center.
6. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is casual and friendly.
    C. Compose the email body based on the user's request; for example, 'Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.'
7. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='Alex')`, which provides the email address. 
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Lunch Plans'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.'
    D. In this case, no attachments are specified.
8. Function Call: `writeEmail(recipients='alex@example.com', subject='Lunch Plans', body='Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.')`
    A. Assuming getContacts(name='Alex') returns 'alex@example.com'.
9. Example Response: "Here is your draft email to Alex: Subject: Lunch Plans. Body: Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.
10. Follow up: 
    A. If the user confirms, proceed to send the email using the `sendEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` function.
    B. Specific plans are provided, suggest to add the event to the Users' calendar with `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.

###Process Flow###
1. Identify the email's purpose and the recipient's relationship to you.
2. Decide on the appropriate tone (formal or informal) based on the context.
3. Draft the message, ensuring clarity, conciseness, and politeness, while adjusting the level of detail as needed.
4. Review the message for tone consistency, grammatical accuracy, and completeness before sending.

###Objectives###
1. To convey the intended message effectively and appropriately, respecting the recipient's time and potential sensitivities.
2. To adapt the tone and detail of the email body according to the specific context, ensuring optimal communication and response.
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
###Parameter###
`attachments (Optional[list[str]])`: Include files as email attachments by specifying their paths. Useful for sending documents, images, or other files alongside your message.

###Parameter Description###
The `attachments` parameter allows users to attach files to an email. This list should contain the paths (as strings) to each file you wish to attach. It's designed to enhance communication by enabling the sharing of documents, images, presentations, or other relevant files directly within the email. When specifying attachments, ensure the paths are accurate and accessible to prevent errors during the email sending process.

###Parameter Usage###
To use the `attachments` parameter, provide a list of strings, each representing the path to a file you intend to attach to the email. This enables the inclusion of multiple attachments in a single email, supporting a wide range of file types to accommodate various needs and contexts.
##Example Usage## 
1. User Inquiry: "Email John Doe about the project, asking for feedback on the action plan, and attach the project plan: project_plan.pdf."
2. System Inference: The user wants to contact 'John Doe' regarding the project, seeking feedback on the action plan and attaching 'project_plan.pdf'.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    C. Generate a Subject and Body based on the user's request.
    D. Attach the specified file path exactly as provided.
4. Parameter Input:
    A. `recipients: (list[str])`: The recipient is 'John.Doe@outlook.com' (Assume this is the email returned by `getContacts(name='John Doe')`.
    B. `subject: (str)`: An example generated subject is: 'Action Plan for Project'.
    C. `body: (str)`: An example composed body is: 'Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference.'
    D. `attachments: (list[str])`: The attachment is `['project_plan.pdf']`.
5. Function Call: `writeEmail(recipients=['John.Doe@outlook.com, subject='Action Plan for Project', body='Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference.', attachments=['project_plan.pdf'])`
6. Example Response: "Your email to John Doe has been composed: Subject: Action Plan for Project. Body: Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference. Attachments: project_plan.pdf. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.


###Process Flow###
1. Determine the files to attach and ensure they're accessible.
2. Create a list of file paths.
3. Include this list when calling the function to compose the email, ensuring each path is a string.
4. Confirm the attachments with the user before sending the email.

###Objectives###
1. Enhance the email's informational value by enabling the inclusion of relevant files.
2. Provide a flexible method for attaching various file types to accommodate different user needs.
3. Simplify the process of attaching multiple files to an email, improving communication efficiency.

"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "sendEmail"
description = """
###Function Overview###
The `sendEmail` function is designed to send an email after the draft has been reviewed and confirmed by the user. This function plays a pivotal role in the email communication workflow, transforming the approved draft into an actual email that is delivered to the recipient's inbox. It is the conclusive step in the email preparation process, necessitating prior usage of the `writeEmail` function for drafting.

###!!!Important Note!!!###
Before executing the `sendEmail` function, ensure that the email draft has been reviewed and approved by the user. This confirmation step is crucial to prevent inadvertent or erroneous email dispatches. The `sendEmail` function should only be called after the user has explicitly consented to send the email.

###Parameters###
- `recipients (list[str])`: The email addresses of the recipients **EXACTLY**, as confirmed in the `writeEmail` step. 
- `subject (str)`: The subject line of the email, **EXACTLY** as finalized during the `writeEmail` process.
- `body (str)`: The body of the email, **EXACTLY** as reviewed and approved by the user in the `writeEmail` phase.
- `attachments (Optional[list[str]])`: Files or documents to be attached with the email, **EXACTLY** as specified by the user during the `writeEmail` process.

###Returns###
- `email_report (str)`: A confirmation message stating the outcome of the email sending process. This report provides feedback on whether the email was sent successfully or if any issues were encountered.

###Usage Example###
1. User Inquiry: "Yes, looks good."
2. System Inference: The user has reviewed the email draft and confirmed it for sending.
3. Internal Reasoning: 
    A. The user has approved the email draft.
    B. Proceed with sending the email to the specified recipient(s).
4. Parameter Input:
    A. `recipients: (list[str])`: The recipient(s) of the email, **EXACTLY** as displayed to the user.
    B. `subject: (str)`: The subject line of the email, **EXACTLY** as displayed to the user.
    C. `body: (str)`: The email body, **EXACTLY** as displayed to the user.
    D. `attachments (Optional[list[str]])`: Any attachments **EXACTLY** as displayed to the user.
5. Function Call: `sendEmail([recipients], subject, body, attachments)`
6. Example Response: "Your email to [Recipient] about [Subject] has been successfully sent."


###Procedure###
1. **Verify User Confirmation**: Ensure there is explicit approval from the user to send the email. This step is critical and usually follows the user's review of the provided email draft.
    A. If the user does not confirm, call `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))`.
2. **Executing the Send Command**: Once user confirmation is obtained, proceed with sending the email, employing the details (recipients, subject, body, attachments) as **EXACTLY** as prepared in the `writeEmail` step.
3. Upon successful dispatch of the email, communicate this to the user with a clear confirmation message, e.g., "Your email to [Recipient] about [Subject] has been successfully sent."

###Objectives###
- **Accuracy Is Key**: Double-check that all details—recipients, subject, body, and attachments—correspond with the user's last review and approval to minimize errors.
- **Clear Confirmation Protocol**: Always obtain and verify user consent before sending an email. This practice reinforces trust and ensures user control over communication.
- **Prompt and Clear Communication**: Quickly inform the user about the status of their email, providing a succinct and affirmative confirmation message upon successful sending.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
recipients (list(str]): The email addresses of the recipients **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject line of the email, **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
body (str): The main content or message of the email, **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
attachments (Optional[list[str]]): Any files or documents attached to the email **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getLocation"
description = """
###Function Overview###
The `getLocation` function identifies and provides the user's current geographical location. It is specifically designed to address queries about the user's whereabouts, catering to both direct and indirect inquiries about location. This function is instrumental in offering location-based services or information, making it a valuable tool for enhancing user experience in various applications.

###Parameters###
This function does not require any input parameters. Its operation is straightforward—aimed solely at determining and relaying the user's current location.

###Returns###
`location (str)`: A string detailing the user's current location. The function is designed to deliver this information in an easily understandable format.

###Example Usage###
User Inquiry: "Where am I right now?"
System Inference: The user seeks information about their current location.
Internal Reasoning: 
    A. The user's query is location-specific.
    B. Utilize the `getLocation` function to identify and provide the user's current geographical coordinates.
Parameter Input: No input parameters are required for this function.
Function Call: `getLocation()`
Example Response: "You are currently at [Location]."

###Process Flow###
1. **User Location Inquiry**: Identify user queries related to their current location, whether direct or indirect.
2. **Invoke the `getLocation()` Function**: Call the `getLocation()` function to determine and retrieve the user's current geographical coordinates.
3. **Communicate the Location**: Present the user's location in a clear and user-friendly format, ensuring the information is easily understood and relevant to the user's query.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getDate"
description = """
###Function Overview###
The `getDate` function is designed to retrieve the current date and time, providing users with real-time information about the present moment. This function serves as a foundational tool for various applications, enabling accurate time-based operations and enhancing user interactions with time-sensitive services.

###Parameters###
This function does not require any input parameters. Its primary objective is to ascertain and relay the current date and time to the user.

###Returns###
`current_date (str)`: A string representing the current date and time. The function delivers this information in a standardized format for user comprehension and application.

###Example Usage###
1. User Inquiry: "What is the current date and time?"
2. System Inference: The user seeks real-time information about the current date and time.
3. Internal Reasoning: 
    A. The user's query pertains to the present moment.
    B. Utilize the `getDate()` function to retrieve and present the current date and time.
4. Parameter Input: No input parameters are required for this function.
5. Function Call: `getDate()`
6. Example Response: "The current date and time is [Date and Time]."

###Process Flow###
1. **User Time Inquiry**: Identify user queries related to the current date and time.
    A. Recognize you have access to real-time data.
2. **Invoke the `getDate()` Function**: Call the `getDate()` function to retrieve the current date and time information.
3. **Communicate the Date and Time**: Present the current date and time in a clear and user-friendly format, ensuring the information is easily understood and relevant to the user's query.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "createCalendarEvent"
description = """
###Function Overview###
The `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function enables the composition of calendar events based on user queries. This function is adaptable to both direct and indirect user instructions regarding event creation. It serves as a foundational step before employing the `saveCalendarEvent` function to finalize and save the event. This function is capable of handling date and time inputs as directly provided by the user, including ambiguous terms like "tomorrow" or "next week," without modification.

###!!!Important Note!!!###
1. **Prerequisite Function**: The `createCalendarEvent` function is a preparatory step for event creation and requires user confirmation before proceeding to save the event.
2. **Suggest Event Creation**: If the user makes related queries, for example in an email, suggest to create an event using this function.

###Parameters###
- `subject: (str)`: The title or subject of the event. This string should succinctly encapsulate the essence of the event.
- `start: (str)`: The start of the event, provided as a string. If the user specifies a date, use it **EXACTLY** as stated, even if it is ambiguous.
- `end: Optional(str)`: An optional parameter specifying the end of the event, if provided by the user.
- `location: Optional[str]`: An optional parameter for specifying the event's location, if mentioned by the user.
- `recurrence: Optional[boolean]`: An optional boolean indicating whether the event is recurring, as requested by the user.

###Returns###
- `calendar_report: (str)`: A natural language summary of the event details, including the title, start, end, location, and recurrence status. This report is prepared for user confirmation and is intended to mirror the format in which attributes will be passed to the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(bool))` function.

###Usage Example###
##Vague Date and Time Provided##
1. User Inquiry: "Create an event for the English exam next week."
2. System Inference: The user requests an event creation for the English exam next week without specifying a precise date or time.
3. Internal Reasoning: 
    A. The user's query lacks specific date and time details.
    B. The user's query lacks an end.
4. Parameter Input: 
    A. `subject`: 'English exam'`
    B. `start`: 'next week'
5. Function Call: `createCalendarEvent(subject='English exam', start='next week')`
6. Example Response: "Your event for the English exam has been created: Start: in one week at 12:00. End: in one week at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolena))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolena)) until the User confirms.
##Explicit Date and Time Provided##
1. User Inquiry: "Create an event for the English exam on December 12th 2024 at 12:00."
2. System Inference: The user requests an event creation for the English exam on December 12th at 12:00 lasting 2 hours.
3. Internal Reasoning: 
    A. The user's query includes a specific date and time.
    B. The user's query includes an end.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: '2024-12-12T12:00:00'
    C. `end`: '2024-12-12T14:00:00'
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00', end='2024-12-12T14:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolena))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolena))` until the User confirms.

###Process Flow###
1. **Interpret User Query**: Analyze the user's request to extract details such as the event subject, start, end, location, and recurrence.
2. **Apply User-Specified Dates**: Incorporate unchanged dates / times into the event details, even if vague.
3. **Fallback for Missing Dates**: For events without a start, use the `getDate()` function to obtain the current date and time as the default start.
4. **Construct Event Details**: Assemble the event information based on extracted or default values for submission to the calendar.

###!!!Feedback and Confirmation!!!###
1. Provide a preview of the event draft to the user, asking for their review and confirmation.
2. Inquire if the user wishes to save the event as drafted or requires adjustments, ensuring clear communication and user satisfaction.
3. If the user requires adjustements, call this function again with the updated details.

###Objectives###
1. **Unaltered User Input**: Preserve the user's specified dates and times, even if ambiguous, to maintain the integrity of the event details.
2. **Default Date Handling**: Implement fallback mechanisms to address missing or vague date/time inputs, ensuring event creation is not impeded by incomplete information.
3. **User Confirmation**: Prompt the user to confirm the event details before proceeding to save the event, ensuring accuracy and user consent.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
###Parameter###
`subject (str)`: Specify the event's title or main purpose, as indicated by the user. This parameter is essential for creating the event and must be clearly defined to accurately reflect the event's focus.

###Parameter Description###
The `subject` parameter is a critical component for event creation, serving as the identifying title or purpose of the event. It should be a concise, descriptive string that encapsulates the essence of the event, provided directly by the user. In instances where the user has not specified a subject, you may need to request additional information or infer the subject based on the context of the user's request.

###Parameter Usage###
##Direct Request##
The user explicitly states the event subject.
1. User Inquiry: "Create an event with subject 'Team Meeting' on December 12th, 2024 at 9:00 AM."
2. System Inference: The user requests an event creation for a 'Team Meeting' on December 12th, 2024 at 9:00 AM.
3. Internal Reasoning: 
    A. The user provides a clear subject for the event.
    B. The user specifies a precise date and time for the event.
    C. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: '2024-12-12T09:00:00'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
##Indirect Request##
The user's request implies the event subject without explicitly stating it.
1. User Inquiry: "I need to schedule a meeting with the team on December 12th, 2024 at 9:00 AM."
2. System Inference: The user discusses scheduling a meeting with the team on December 12th, 2024 at 9:00 AM.
3. Internal Reasoning: 
    A. The user wants to create an event to discuss a meeting with the team.
    B. Given the context, infer the subject for the event.
    C. The user specifies a precise date and time for the event.
    D. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'Team Meeting' (Inferred from the user's discussion about meeting with the team.)
    B. `start`: '2024-12-12T09:00:00'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.


###Process Flow###
1. **Identification**: Extract or identify the event's subject from the user's request.
2. **Verification**: Ensure the subject is adequately descriptive for event creation. If the subject is not provided, engage the user for clarification.
3. **Implementation**: Pass the identified or clarified subject into the `createCalendarEvent` function as a string.
4. **Confirmation**: Present the event draft to the user for review and confirmation before proceeding to save the event.

###Objectives###
1. To clearly define the event's focus, ensuring it is accurately represented in the calendar.
2. To facilitate the creation of a meaningful and identifiable event, enhancing the user's schedule management.
3. To adaptively handle instances where the user has not specified a subject, thereby maintaining the effectiveness of the event creation process.
4. To prompt user confirmation of the event details, ensuring accuracy and user satisfaction.
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
###Parameter###
`start (str)`: Determine the event's start, based on the user's input. This critical parameter sets the event's beginning in the calendar.

###Parameter Description###
The `start` parameter is essential for scheduling the event, representing the time when the event is set to begin. It requires a string input that can either be directly provided by the user or inferred from their request. The parameter must accommodate explicit dates and times given by the user, including potentially ambiguous terms like "tomorrow" or "next week." This approach ensures the event aligns with the user's expectations without any modifications to the specified timeframe.

###Parameter Usage###
##Start Explicitly Mentioned##
1. User Inquiry: "Create an event for the English exam next monday at 9:00 AM."
2. System Inference: The user requests an event creation for the English exam next Monday at 9:00 AM.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'next Monday 09:00:00'
5. Function Call: `createCalendarEvent(subject='English exam', start='next Monday 09:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: next Monday at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

##Start Ambiguously Mentioned##
1. User Inquiry: "Create an event for the English exam next week."
2. System Inference: The user requests an event creation for the English exam next week without specifying a precise date or time.
3. Internal Reasoning: 
    A. The user's query lacks specific date and time details.
    B. The user's query lacks an end.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'next week'
5. Function Call: `createCalendarEvent(subject='English exam', start='next week')`
6. Example Response: "Your event for the English exam has been created: Start: in one week at 12:00. End: in one week at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

##No Start Mentioned##
1. User Inquiry: "Create an event for the English exam."
2. System Inference: The user requests an event creation for the English exam without specifying a precise date or time.
3. Internal Reasoning: 
    A. The user's query lacks specific date and time details.
    B. The user's query lacks an end.
    C. Default to the current date and time.
    D. Call `getDate()` to obtain the current date and time.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: Current date and time string obtained from `getDate()`.
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

###Process Flow###
1. **Collect Input**: Extract or deduce the start from the user's request.
2. **Handle Ambiguity**: If the user specifies an ambiguous start, such as "tomorrow" or "next week," use the term as provided without alteration.
3. **Fallback Procedure**: In cases where no start is specified, utilize `getDate()` to determine the current date and time, serving as the default start.

###Objectives###
1. To accurately schedule events according to the user's provided or inferred timing, ensuring the event's start meets their expectations.
2. To respect the user's language and terms when specifying the event's start, even if vague or ambiguous.
3. To provide a reliable fallback mechanism for determining the event's start when not explicitly stated by the user, maintaining the functionality of the event creation process.
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
###Parameter###
`end: Optional(str)`: Specify the conclusion time of the event. This parameter is utilized to mark the event's end in the calendar and is optional based on user input.

###Parameter Description###
The `end` parameter is crucial for defining the duration of an event by indicating when it concludes. It accepts a string that represents the end, which can be explicitly provided by the user or deduced from context. If the user does not specify an end, it may be beneficial to request further clarification or apply a reasonable estimation based on typical event lengths or similar past events.

###Parameter Usage###
This parameter is employed by passing a string that denotes the end of the event into the function call. The input should either directly reflect the user's indication or be an informed estimate in the absence of specific details from the user.
##End Explicitly Mentioned##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 from 12:00 to 14:00."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 from 12:00 to 14:00.
3. Internal Reasoning: 
    A. The user provides a specific end for the event.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: '2024-12-12T12:00:00'
    C. `end`: '2024-12-12T14:00:00'
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00', end='2024-12-12T14:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

##End Not Mentioned but can be Inferred##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 at 12:00."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 at 12:00 without specifying an end.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. Estimate the end based on the event type or standard durations.
    D. Exams typically last a couple hours.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: '2024-12-12T12:00:00'
    C. `end`: '2024-12-12T14:00:00' (Estimated based on exam duration)
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00', end='2024-12-12T14:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

##End Not Mentioned and Cannot be Inferred##
1. User Inquiry: "Create an event for the Marathon."
2. System Inference: The user requests an event creation for the Marathon without specifying a precise date, time, or end.
3. Internal Reasoning: 
    A. The user's query lacks specific date, time, and end details.
    B. Request additional information from the user.
4. User Response: "The Marathon is on December 12th, 2024."
5. System Inference: The user provides a specific start for the Marathon.
6. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The duration of a Marathon varies significantly.
7. Parameter Input:
    A. `subject`: 'Marathon'
    B. `start`: '2024-12-12
8. Function Call: `createCalendarEvent(subject='Marathon', start='2024-12-12')`
9. Example Response: "Your event for the Marathon has been created: Start: December 12th, 2024. Would you like to save it?"
10. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

###Process Flow###
1. **Extraction**: Identify the event's end from the user's instructions.
2. **Inference**: If the end is not specified, either seek additional information from the user or estimate based on the event type and standard durations.
3. **Application**: Integrate the determined end into the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function as a parameter.


###Objectives###
1. To accurately capture the event's duration by defining a specific end, enhancing the calendar's usefulness and precision.
2. To maintain flexibility in handling user inputs by allowing for estimation or follow-up questions when end details are lacking.
3. To ensure the event creation process is as informative and user-centric as possible, resulting in a calendar entry that meets or exceeds the user's expectations.
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
###Parameter###
`location (Optional[str])`: Denote the venue or place where the event is scheduled to occur. This parameter, while optional, enriches the event details by providing spatial context.

###Parameter Description###
The `location` parameter is intended to specify the geographical or virtual location of an event, adding significant value to the event's description within a calendar. It accepts a string input detailing the event's venue, which could range from a physical address to a digital platform link. Incorporating the location is particularly useful for events that require attendees to be at a certain place or to access a specific online meeting room.

###Parameter Usage###
This parameter should be included in the function call if the user has provided information about where the event will take place. It is utilized by passing a string that represents the event's location, as specified by the user or as can be reasonably determined from the context of their request.
##Location Explicitly Provided##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 at 12:00 at the University of Amsterdam."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 at 12:00 at the University of Amsterdam.
3. Internal Reasoning: 
    A. The user provides a specific location, and start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: '2024-12-12T12:00:00'
    C. `end`: '2024-12-12T14:00:00' (Estimated based on exam duration)
    C. `location`: 'University of Amsterdam'
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00', end='2024-12-12T14:00:00', location='University of Amsterdam')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Location: University of Amsterdam. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
##Location Not Provided##
1. User Inquiry: "Create an event for the Team Meeting on December 12th, 2024 at 9:00 AM."
2. System Inference: The user requests an event creation for the Team Meeting on December 12th, 2024 at 9:00 AM without specifying a location.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
    D. Attempt to obtain the location from context. Meetings are likely to be at the office.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: '2024-12-12T09:00:00'
    C. `end`: '2024-12-12T10:00:00' (Estimated based on meeting duration)
    D. `location`: 'Office' (Inferred from the context)
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00', end='2024-12-12T10:00:00', location='Office')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: December 12th, 2024 at 10:00 AM. Location: Office. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
##Virtual Location Provided##
1. User Inquiry: "Create an event for the Team Meeting on December 12th, 2024 at 9:00 AM on Zoom: https//:zoom.com/109435h."
2. System Inference: The user requests an event creation for the Team Meeting on December 12th, 2024 at 9:00 AM on Zoom.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
    D. The location is a virtual platform, Zoom.
    E. Include the Zoom link in the location.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: '2024-12-12T09:00:00'
    C. `end`: '2024-12-12T10:00:00' (Estimated based on meeting duration)
    D. `location`: 'Zoom: https//:zoom.com/109435h'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00', end='2024-12-12T10:00:00', location='Zoom: https//:zoom.com/109435h')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: December 12th, 2024 at 10:00 AM. Location: Zoom: https//:zoom.com/109435h. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

###Process Flow###
1. **Capture Location Detail**: Extract the location information from the user's request.
2. **Inclusion in Event Details**: Incorporate this detail into the event creation process by including it as a parameter in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
3. **Adapt to Context**: Adjust the event details based on the presence or absence of location information, ensuring the event is accurately represented in the calendar.

###Objectives###
1. To provide complete and detailed event information by including the location, thereby enhancing the event's accessibility and clarity for attendees.
2. To ensure that the calendar entry is as informative and useful as possible, facilitating efficient planning and preparation for the event participants.
3. To maintain adaptability in the event creation process, accommodating the inclusion of location details when available and proceeding effectively even when such details are absent.
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
###Parameter###
`recurrence (Optional[bool])`: Specify whether the event recurs on a regular basis. This parameter, optional but vital for certain types of events, indicates if an event, such as a meeting, class, or routine commitment, repeats periodically.

###Parameter Description###
The `recurrence` parameter plays a key role in defining the cyclical nature of an event. When set to `True`, it signifies that the event occurs repeatedly according to a defined pattern (e.g., daily, weekly, monthly). This setting is essential for automating the scheduling of regular events, ensuring consistency and reliability in event planning. The parameter accepts a boolean value, with `True` indicating recurrence and `False` or the absence of the parameter indicating a one-time event.

###Parameter Usage###
Incorporate this parameter into the function call if the user specifies or implies that the event should recur. Utilize a boolean value (`True` or `False`) to reflect the event's recurring status as described by the user.
1. User Inquiry: "Schedule a weekly team meeting every Wednesday at 9:00 AM."
2. System Inference: The user requests the creation of a recurring event for a weekly team meeting.
3. Internal Reasoning: 
    A. The user specifies a start and time.
    B. The user indicates the event should recur weekly.
    C. The user does not mention an end.
    D. The end can be estimated based on the event type or standard durations (meetings typically last approx. 30 minutes).
    E. The location can be inferred from context (e.g., office or conference room).
4. Parameter Input:
    A. `subject`: 'Weekly Team Meeting'
    B. `start`: '2023-10-05T09:00:00'
    C. `end`: '2023-10-05T09:30:00' (Estimated based on meeting duration)
    D. `location`: 'Office' (Inferred from the context)
    E. `recurrence`: `True`
5. Function Call: `createCalendarEvent(subject='Weekly Team Meeting', start='2023-10-05T09:00:00', end='2023-10-05T09:30:00', location='Office', recurrence=True)`
6. Example Response: "Your event for the Weekly Team Meeting has been created: Start: October 5th, 2023 at 9:00 AM. End: October 5th, 2023 at 9:30 AM. Location: Office. Recurrence: Weekly. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

###Process Flow###
1. **Determine Recurrence**: Ascertain from the user's request whether the event is intended to repeat on a regular schedule.
2. **Parameter Integration**: Apply the boolean value to the `createCalendarEvent` function, accurately representing the event's recurrence as intended by the user.

###Objectives###
1. To ensure the calendar reflects the true nature of the event, accurately scheduling recurring events to facilitate regular attendance or participation.
2. To provide flexibility in event scheduling, allowing users to designate events as recurring or one-time as per their requirements.
3. To enhance the calendar's utility by automating the scheduling of routine commitments, reducing the need for manual entry of each occurrence.
"""
parameters.required = ["subject", "start"]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "saveCalendarEvent"
description = """
###Function Overview###
The `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function is crucial for integrating and finalizing events within the user's calendar. It serves as the concluding step in the event creation process, activated after the user has confirmed the details prepared by the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function. This function securely stores the event, ensuring it is reflected accurately in the user's calendar.

###!!!IMPORTANT NOTE!!!###
This function is intended as a follow-up to `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))`, and should only be invoked after receiving user confirmation of the event details.

###Parameters###
- `subject (str)`: The event's title, **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
- `start (str)`: The start **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
- `end (Optional[str])`: The event's end, **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
- `location (Optional[str])`: The specified location for the event **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
- `recurrence (Optional[bool])`: The recurrence status **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.

###Returns###
- `calendar_reports (str)`: A confirmation message that provides feedback to the user about the successful creation and saving of the event in their calendar.

###Usage Example###
##User Approval##
1. User Inquiry: "Looks good! Please save the event."
2. System Inference: The user confirms the event details and requests to save the event.
3. Internal Reasoning: 
    A. The user has reviewed and approved the event information.
    B. Proceed with saving the event in the user's calendar.
4. Parameter Input:
    A. `subject`: 'Team Meeting' (Example **EXACT** subject from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.`)
    B. `start`: '2024-12-12T09:00:00' (Example **EXACT** start from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
    C. `end`: Not specified (Example **EXACT** end from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
    D. `location`: Not specified (Example **EXACT** location from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
    E. `recurrence`: Not specified (Example **EXACT** recurrence from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
4. Function Call: `saveCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00')`
5. Example Response: "Your event for the Team Meeting has been successfully saved in your calendar."

##User Request for Modification##
1. User Inquiry: "Can you change the location to the conference room?"
2. System Inference: The user requests a modification to the event details.
3. Internal Reasoning: 
    A. The user seeks to update the event's location.
    B. Proceed with the location change.
    C. Call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` to adjust the event details.
4. Parameter Input:
    A. `subject`: 'Team Meeting' (Example **EXACT** subject from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
    B. `start`: '2024-12-12T09:00:00' (Example **EXACT** start from `**EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.)
    C. `location`: 'Conference Room' (Updated location as requested by the user.)
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='2024-12-12T09:00:00', location='Conference Room')`
6. Example Response: "The location for your Team Meeting has been updated to the Conference Room. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests further changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

###Process Flow###
1. **User Confirmation**: Await the user's approval to save the event in their calendar.
2. **Feedback Delivery**: Provide a confirmation message to the user, acknowledging the successful saving of the event.

###Objectives###
1. To finalize the event creation process by securely storing the event in the user's calendar upon their confirmation.
2. To deliver clear and concise feedback to the user, confirming the successful saving of the event.
3. To ensure the event is accurately reflected in the calendar, maintaining consistency and reliability in scheduling and planning.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function 
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
start (str): The start **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
end (str): The end **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
location (Optional[str]): The location **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
recurrence (Optional [bool]): The recurrence status **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
parameters.required = ["subject", "start"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getContacts"
description = """
###Function Overview###
The `getContacts(name: (str))` function serves as a comprehensive tool for accessing a user's contact list, enabling queries both broad and specific. Its utility is especially highlighted in scenarios requiring the identification of contact details based on names rather than email addresses, such as when preparing to send an email. This function can fetch an entire contact list or pinpoint specific contacts, providing vital support for email communication and other contact-related inquiries.

###Parameters###
- `name (Optional[str])`: An optional parameter to specify the name of a contact. This is particularly useful when the user intends to send an email to a named recipient or is seeking information about a specific person in their contact list. Utilizing this parameter helps in accurately retrieving the required contact details.

###Returns###
- `contacts (list[str])`: Outputs a list of contact names or email addresses in natural language. If a specific contact is requested, the function will return the best matches (with over 80% similarity) to the provided name. This ensures users can easily identify and utilize the correct contact information for their needs.

###Example Usage###
##Retrieve Full Contact List##
1. User Inquiry: "Show me my contacts."
2. System Inference: The user requests an overview of their contact list.
3. Internal Reasoning: 
    A. The user seeks a comprehensive view of their contacts.
    B. No specific contact name is provided.
    C. Retrieve the full contact list.
4. Parameter Input: Not applicable (No specific name provided).
5. Function Call: `getContacts()`
6. Example Response: "Here is your contact list: John Doe, Alex, Sarah, ... (Full list of contacts)."
7. Listen for Further User Actions: 
    A. If the user requests specific details, proceed with the `getContacts(name: (str))` function.
    B. If the user requires additional actions, respond accordingly based on their inquiries.
##Retrieve Specific Contact Details##
1. User Inquiry: "Get me the contact details for John Doe."
2. System Inference: The user requests specific contact details for John Doe.
3. Internal Reasoning: 
    A. The user seeks information about a particular contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe.
4. Parameter Input: 
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Example Response: "Contact Details for John Doe: Email - John.Doe@outlook.com, Phone - 123-456-7890."
7. Listen for Further User Actions: 
    A. If the user intends to send an email, proceed with the email composition process.
    B. If the user requires additional information or actions, respond accordingly based on their inquiries.

##Implicit Contact Retrieval for Email Composition##
1. User Inquiry: "Send an email to John Doe."
2. System Inference: The user requests to send an email to John Doe.
3. Internal Reasoning: 
    A. The user intends to compose an email to a specific contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe to facilitate email composition.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Continue with the email composition process using the obtained contact details.

###Process Flow###
1. **Contact Retrieval**: Access the user's contact list to provide the requested information.
2. **Specific Inquiry Handling**: If a name is provided, retrieve the corresponding contact details.
3. **Email Composition Support**: Assist in email preparation by fetching the necessary contact information.
4. **User Confirmation**: Seek user validation for the retrieved contact details before proceeding with further actions.

###Integration with User Actions: Email Composition###
- For email tasks, follow a structured approach:
    1. Retrieve the desired contact's email by specifying their name.
    2. Use the obtained email address in the email composition step.
    3. Confirm the details with the user before sending the email to ensure accuracy and user satisfaction.

Objectives:
1. To provide users with a comprehensive view of their contact list, facilitating easy access to contact details.
2. To support users in email composition by retrieving the necessary contact information based on the recipient's name.
3. To ensure the accuracy and relevance of contact details, enhancing user experience and task efficiency.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.name]
type = "string"
description = """
###Parameter###
`name (Optional[str])`: This parameter is utilized to specify the name of a contact when the user seeks information about a specific individual or intends to send an email to a named recipient. It plays a crucial role in precisely identifying and retrieving contact details from the user's contact list.

###Parameter Description###
The `name` parameter assists in narrowing down the search within the user's contact list to find specific contact details, especially useful in email communication scenarios. When a user mentions a specific name, this parameter helps fetch the exact contact information, such as an email address, corresponding to the provided name. It is designed to ensure that actions like sending emails are directed to the correct recipient. In situations where multiple contacts match the provided name, the system may prompt the user for further specification or automatically select the most relevant match.

###Parameter Usage###
To utilize this parameter effectively, input the contact's name as a string when invoking the function. This is particularly important when the user's request involves a specific individual, either for gathering contact information or for targeting email communication.

###Examples###
##Direct Request for a Specific Contact##
1. User Inquiry: "Get me the contact details for John Doe."
2. System Inference: The user requests specific contact details for John Doe.
3. Internal Reasoning:
    A. The user seeks information about a particular contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Example Response: "Contact Details for John Doe: Email - John.Doe@outlook.com, Phone - 123-456-7890."
7. Listen for Further User Actions:
    A. If the user intends to send an email, proceed with the email composition process.
    B. If the user requires additional information or actions, respond accordingly based on their inquiries.
##Implicit Contact Retrieval for Email Composition##
1. User Inquiry: "Send an email to John Doe."
2. System Inference: The user requests to send an email to John Doe.
3. Internal Reasoning:
    A. The user intends to compose an email to a specific contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe to facilitate email composition.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Continue with the email composition process using the obtained contact details.

##Handling Multiple Matches##
1. User Inquiry: "Send an email to Bob."
2. System Inference: The user intends to send an email to a contact named Bob.
3. Internal Reasoning:
    A. The user intends to communicate with a contact named Bob.
    B. The name 'Bob' is provided.
    C. Retrieve the contact details for Bob to facilitate email composition.
4. Parameter Input:
    A. `name`: 'Bob'
5. Function Call: `getContacts(name='Bob')`
    A. If multiple contacts match the name 'Bob', prompt the user for further clarification.
    B. If a single match is found, proceed with the email composition process.
6. Listen for User Clarification:
    A. If the user specifies the intended contact, proceed with the email composition.
    B. If further assistance is needed, provide additional support based on the user's input.

    ```python
    # The user intends to send an email to "John Doe".
    getContacts('John Doe')
    ```
    In this scenario, the function would retrieve the email address associated with "John Doe" from the user's contact list, facilitating the subsequent email composition and sending process.

###Process Flow###
1. **Contact Identification**: Locate the contact details based on the provided name.
2. **Email Preparation Support**: Assist in email composition by retrieving the necessary contact information.
3. **User Interaction**: Engage with the user to confirm the retrieved contact details and proceed with the desired actions.

###Objectives###
1. To accurately identify and retrieve specific contact information from the user's contact list based on the provided name, ensuring that communication efforts, such as email sending, are accurately directed.
2. To facilitate seamless communication by providing the correct contact details, thereby enhancing the efficiency of email-related tasks.
3. To offer a user-friendly approach in cases of multiple matches by either seeking further clarification from the user or selecting the most appropriate contact based on available data.
"""


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "findFile"
description = """
###Function Overview###
The `findFile(filename: (str))` function is designed to search for and return the unique identifier (file_id) associated with a specified filename. This identifier is critical for accurately locating and accessing files within the system's filesystem before conducting any file manipulations or data analyses. The function plays a key role in ensuring that operations are performed on the correct file by providing a safe and precise method for file identification.

###!!!IMPORTANT NOTE!!!###
1. This function does not open the file but solely returns the file_id, which is essential for subsequent file operations.
2. The file_id should not be displayed to the user but used internally by the code interpreter for file handling tasks.
3. The function is a preliminary step in file operations, ensuring that file-related actions are executed on the intended file.
4. The file_id is the only method to locate and access files within the filesystem.

###Parameters###
`filename (str)`: The name of the file to locate. This parameter requires the user to specify the exact name of the file they wish to access, facilitating the search for its corresponding file_id within the filesystem.

###Returns###
`file_id (str)`: A unique identifier for the file specified by the filename parameter. This file_id is essential for locating the file within the filesystem for any subsequent file operations. It is crucial to understand that:
*The file_id is the only method to accurately locate the file in the filesystem.*
*The function does not open the file; it merely returns the file_id.*
*The returned file_id should not be displayed to the user but used as an intermediate step in the code interpreter for further file operations.*

###Usage Example###
Suppose a user wants to perform data analysis on a file named `finance.csv` to calculate the average revenue for the year 2023. The workflow would be as follows:
1. User Inquiry: "What was the average revenue for the year 2023 in 'finance.csv'?"
2. System Inference: The user requests data analysis on the file `finance.csv` for revenue calculation.
3. Internal Reasoning: 
    A. The user specifies the filename `finance.csv`.
    B. The system needs to locate the file to extract the necessary data.
4. Parameter Input:
    A. `filename`: 'finance.csv'
5. Function Call: `findFile(filename='finance.csv')`
    A. The function returns the file_id associated with `finance.csv`. This file_id is crucial for subsequent data analysis operations.
    B. This is an implicit step in the data analysis process, ensuring that the correct file is accessed for revenue calculation.
6. Proceed with data analysis operations using the obtained file_id.
7. Use `code interpreter` tool to manipulate and analyze the data within the specified file.
8. Example Response: The average revenue for the year 2023 in `finance.csv` is $X.

###Process Flow###
1. **Recognize User Request**: Recognize the user wants to know about a specific file.
    A. **Understand that the only way to access files is through their unique file_id**.
2. **File Identification**: Locate the file within the filesystem based on the provided filename.
3. **File Access**: Retrieve the unique file_id associated with the specified filename for subsequent file operations.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.filename]
type = "string"
description = """
###Parameter###
`filename (str)`: This parameter specifies the name of the file that needs to be located within the system, as explicitly mentioned by the user.

###Parameter Description###
The `filename` parameter is essential for identifying and locating a specific file within the filesystem based on the user's request. It requires a string input representing the exact name of the file of interest, excluding any internal file identifiers or paths known to the system. This approach ensures that the search and subsequent operations are aligned with the user's intentions and that the correct file is targeted for any analysis or manipulation.

###Parameter Usage###
To utilize this parameter effectively, input must be a string that corresponds to the name of the file as described by the user. It is crucial that this name matches the user's specification to ensure the subsequent retrieval of the correct file_id for the intended file.
1. User Inquiry: "What was the average revenue for the year 2023 in 'finance.csv'?"
2. System Inference: The user requests data analysis on the file `finance.csv` for revenue calculation.
3. Internal Reasoning:
    A. The user specifies the filename `finance.csv`.
    B. The system needs to locate the file to extract the necessary data.
4. Parameter Input:
    A. `filename`: 'finance.csv'
5. Function Call: `findFile(filename='finance.csv')`
    A. The function returns the file_id associated with `finance.csv`. This file_id is crucial for subsequent data analysis operations.
    B. This is an implicit step in the data analysis process, ensuring that the correct file is accessed for revenue calculation.
6. Proceed with data analysis operations using the obtained file_id.
7. Use `code interpreter` tool to manipulate and analyze the data within the specified file.
8. Example Response: The average revenue for the year 2023 in `finance.csv` is $X.

###Objective###
1. To accurately map the user's specified file name to its corresponding file_id within the system's filesystem, facilitating targeted and secure file operations.
2. To ensure that the operations and analyses requested by the user are performed on the correct file, thereby maintaining the integrity and relevance of the process.
"""
parameters.required = ["filename"]


[[tools]]
type = "function"
[tools.function]
name = "webText"
description = """
###Function Overview###
The `webText(url: (str))` function is a powerful tool designed to fetch and return text content from a specified website URL. Its primary purpose is to facilitate access to real-time data from the web, allowing for the retrieval of information or content summaries directly from websites. This function is invaluable when users request up-to-date information or need a summary of web content, bridging the gap between static data and the dynamic nature of the internet.

###!!!IMPORTANT NOTE!!!###
1. This function is intended to extract text content from websites and present it in a concise form for user consumption.
2. The extracted text should reflect the primary information or content found on the web page, providing a summary or overview of the site's current data.
3. The function is a valuable resource for addressing user queries that require real-time web content access, enhancing the ability to respond effectively to inquiries involving current events or specific web content.

###When to Call the Function###
-This function should be invoked in situations requiring real-time data from a website, such as when a user seeks the latest news, articles, or specific web-based information.
-It serves as the preliminary step in addressing queries that necessitate web content access, ensuring that the response is grounded in the most current information available online.
-Before concluding that accessing real-time data is not possible, employ this function as an attempt to fulfill the user's request.

###Parameters###
- `url (str)`: The full URL of the website from which to extract text content. This parameter must be a valid and complete web address that directs to the intended content.

###Returns###
- `text (str)`: The textual content retrieved from the specified website, presented in natural language. This output encapsulates the primary information or content found on the web page, offering a direct reflection of the site's current data.

###Example Usage###
1. User Query: "What is the latest news on 'https://www.cnn.com'?"
2. System Inference: The user seeks information about the latest news on 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the text content from the CNN website.
    C. The system can extract the text using `webText(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webText(url='https://www.cnn.com')`
6. Example Response: "The latest news on CNN is..."


###Process Flow###
1. Recognize the user's request for web content information.
2. Recognize the need to access real-time data from a website.
3. Retrieve the text content from the specified website URL.
4. Present the extracted text content in a clear and concise manner for user consumption.

###Objectives###
1. To provide users with real-time web content access, enabling the extraction of text information directly from websites.
2. To enhance the responsiveness to user queries involving web-based content, ensuring that the information provided is current and relevant.
3. To bridge the gap between static data and dynamic web content, facilitating the extraction and presentation of textual information from websites.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
###Parameter###
`url (str)`: The web address of the site from which text content is to be retrieved.

###Parameter Description###
The `url` parameter requires a full, valid URL as a string input. This URL should direct to the website or specific web page the user is interested in extracting text from. It is essential for accessing real-time information or summarizing content available on the web, serving as the critical link between the user's request and the data retrieval process.

###Parameter Usage###
This parameter is utilized by entering the complete web address of the site in question when invoking the function. It enables the function to accurately locate and access the desired web page, ensuring that the retrieved text content matches the user's request for information or summary.
1. User Query: "Summarize the content of 'https://www.cnn.com'?"
2. System Inference: The user seeks to summarize the content of 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the text content from the CNN website.
    C. The system can extract the text using `webText(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webText(url='https://www.cnn.com')`
6. Example Response: "The content of CNN is..."

###Process Flow###
1. Recognize the user's request for web content information.
2. Recognize the need to access real-time data from a website.
3. Retrieve the text content from the specified website URL.
4. Present the extracted text content in a clear and concise manner for user consumption.

###Objective###
1. To facilitate direct access to specific web content by providing a straightforward method for fetching text from a given URL, thereby enhancing the ability to respond to user queries with up-to-date information from the internet.

"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webImages"
description = """
###Function Overview###
The `webImages(url: (str))` function is engineered to access and retrieve image content from a specified website URL. It is an essential tool for interacting with real-time data on the web, specifically designed to gather images from websites based on user requests. This functionality is incredibly useful for providing visual content or descriptions of websites, catering to users interested in the latest images or visual summaries of web pages.

###!!!IMPORTANT NOTE!!!###
1. This function is designed to extract images from websites and present them in a descriptive or linked format.
2. The extracted images should reflect the visual content available on the web page, offering users a glimpse into the site's current imagery.
3. The function is a critical component in addressing user queries that require real-time access to website images, enhancing the ability to respond effectively to visual content inquiries.

###When to Call the Function###
-Invoke this function in response to requests for real-time visual content from a website or when a user asks for a summary or description that includes images.
-It should be the primary approach for acquiring images that are only available through direct web access, ensuring that users receive the most current and relevant visual data.

###Parameters###
- `url (str)`: The complete URL of the website from which images are to be extracted. This parameter requires a valid and accessible web address targeting the specific site containing the desired image content.

###Returns###
- `image (str)`: A string representation of the image(s) retrieved from the website. The output should describe or directly link to the image(s) in natural language, providing a clear indication of the visual content available on the web page.

###Example Usage###
1. User Inquiry: "Show me the latest image on 'https://www.cnn.com'."
2. System Inference: The user requests the latest image from 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the image content from the CNN website.
    C. The system can extract the image using `webImages(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webImages(url='https://www.cnn.com')`
6. Example Response: "The latest image on CNN is..."

###Process Flow###
1. Recognize the user's request for web image content.
2. Acknowledge the need to access real-time visual data from a website.
3. Retrieve the image content from the specified website URL.
4. Present the extracted image content in a descriptive or linked format for user interaction.

###Objectives###
1. To enable users to access real-time visual content from websites by providing a direct method for extracting images based on user requests.
2. To enhance the responsiveness to user queries involving visual content, ensuring that the information provided includes the latest and most relevant images available online.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
###Parameter###
`url (str)`: The web address of the site from which image content is to be retrieved.

###Parameter Description###
The `url` parameter is critical for directing the `webImages` function to the specific website containing the images of interest. It requires the full, valid URL as a string, which should point directly to the webpage the user wishes to explore for images. This parameter ensures that the function targets the correct site for image extraction, facilitating access to visual content as per user requests.

###Parameter Usage###
To utilize this parameter, input the complete URL of the website when invoking the function. The accuracy of the URL is essential for successfully retrieving the desired image content, making it crucial to verify the web address before submission.
1. User Inquiry: "Show me the latest image on 'https://www.cnn.com'."
2. System Inference: The user requests the latest image from 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the image content from the CNN website.
    C. The system can extract the image using `webImages(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webImages(url='https://www.cnn.com')`
6. Example Response: "The latest image on CNN is..."

###Process Flow###
1. Recognize the user's request for web image content.
2. Acknowledge the need to access real-time visual data from a website.
3. Retrieve the image content from the specified website URL.
4. Present the extracted image content in a descriptive or linked format for user interaction.

###Objective###
1. To enable precise access to specific web content by providing a straightforward mechanism for fetching images from a given URL, thus responding effectively to user queries for visual information.
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webLinks"
description = """
###Function Overview###
The `webLinks(url: (str))` function is specifically designed to access and retrieve hyperlink content from a given website URL. This utility is indispensable for gathering real-time data from the web, particularly for obtaining direct links from websites. Whether users are seeking a comprehensive summary that includes hyperlinks or are interested in exploring related information and resources, this function provides a streamlined pathway to fulfilling such requests.

###!!!IMPORTANT NOTE!!!###
1. This function is tailored to extract hyperlinks from websites and present them in a user-friendly format.
2. The retrieved hyperlinks should reflect the available links on the web page, offering users actionable links for further exploration.
3. The function is a vital component in addressing user queries that necessitate real-time hyperlink access, enhancing the ability to respond effectively to inquiries involving web-based links.

###When to Call the Function###
-Utilize this function in response to requests for real-time hyperlink data from websites, or for summaries that incorporate links.
-It is especially pertinent when users seek related information or wish to explore links from a specific website.
-This should be the initial approach for inquiries specifically targeting links that are accessible only through website interaction.

###Parameters###
- `url (str)`: The complete and valid URL of the website from which links are to be extracted. This parameter is fundamental for directing the function to the appropriate web resource.

###Returns###
- `links (str)`: A string that articulately presents the hyperlinks found on the specified website, formatted in a manner conducive to natural language comprehension. This output facilitates easy user interaction with the retrieved links.

###Example Usage###
1. User Inquiry: "What are the latest links on 'https://www.cnn.com'?"
2. System Inference: The user requests the latest links from 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the hyperlink content from the CNN website.
    C. The system can extract the links using `webLinks(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webLinks(url='https://www.cnn.com')`
6. Example Response: "The latest links on CNN are..."

###Process Flow###
1. Recognize the user's request for web hyperlink content.
2. Acknowledge the need to access real-time hyperlink data from a website.
3. Retrieve the hyperlink content from the specified website URL.
4. Present the extracted hyperlink content in a user-friendly format for easy interaction.

###Objectives###
1. To provide users with direct access to real-time hyperlink content from websites, enabling the extraction of actionable links based on user requests.
2. To enhance the responsiveness to user queries involving web-based links, ensuring that the information provided includes the latest and most relevant hyperlinks available online.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
###Parameter###
`url (str)`: The web address of the site from which links are to be extracted.

###Parameter Description###
The `url` parameter is essential for pinpointing the specific website from which hyperlink data is to be retrieved. It requires the full, valid URL as a string, ensuring the function accurately targets the intended web page for link extraction. This input facilitates access to a broad spectrum of links on the specified site, ranging from related articles and resources to external sites referenced within the webpage's content.

###Parameter Usage###
To effectively use this parameter, input the complete URL of the website when invoking the function. The precision of the URL is crucial for the successful extraction of relevant links, underscoring the need to verify the web address's validity before submission.
1. User Inquiry: "What are the latest links on 'https://www.cnn.com'?"
2. System Inference: The user requests the latest links from 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the hyperlink content from the CNN website.
    C. The system can extract the links using `webLinks(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webLinks(url='https://www.cnn.com')`
6. Example Response: "The latest links on CNN are..."

###Process Flow###
1. Recognize the user's request for web hyperlink content.
2. Acknowledge the need to access real-time hyperlink data from a website.
3. Retrieve the hyperlink content from the specified website URL.
4. Present the extracted hyperlink content in a user-friendly format for easy interaction.

###Objective###
1. To provide a direct mechanism for accessing hyperlink content from specified URLs, thus responding effectively to user queries about website links or seeking related information.
"""
parameters.required = ["url"]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webMenus"
description = """
###Function Overview###
The `webMenus(url: (str))` function is crafted to access and return the menu items from a specified website URL, offering a detailed overview of the site's structure and content categories. It stands as a vital tool for users looking to understand the layout and navigational elements of a website, such as sections for news, about pages, services, or contact information. This functionality is invaluable for summarizing or describing websites, providing users with a concise representation of the site's primary offerings.

###!!!IMPORTANT NOTE!!!###
1. This function is designed to extract and present the main menu items from websites, offering users a clear understanding of the site's content structure.
2. The retrieved menu items should reflect the primary sections or categories available on the web page, providing users with a snapshot of the site's content framework.
3. The function serves as a key resource for addressing user queries related to website organization or content categorization, enhancing the user's comprehension of the site's layout and accessible content.

###When to Call the Function###
-Utilize this function in response to queries about the organization or content categorization of a website.
-It is particularly apt when users express a desire to grasp the main sections or navigational menus of a site, facilitating a quick understanding of the available content types and site architecture.

###Parameters###
- `url (str)`: The complete URL of the website from which menu items are to be extracted. This parameter is critical for ensuring that the function targets the correct web resource for menu retrieval.

###Returns###
- `menus (str)`: A descriptive list in natural language, encapsulating the main menu items found on the specified website. This return value aims to provide a clear and organized summary of the site's primary sections, enhancing the user's comprehension of the website's layout and accessible content.

###Example Usage###
1. User Inquiry: "Describe the CNN website."
2. System Inference: The user seeks a description of the CNN website.
3. Internal Reasoning:
    A. The user requests an overview of the CNN website.
    B. The system needs to extract the menu items from the CNN site.
    C. The system can extract the menus using `webMenus(url='https://www.cnn.com')`.
    D. The system needs to extract the image items from the CNN site.
    E. The system can extract the images using `webImages(url='https://www.cnn.com')`.
    F. The system needs to extract the hyperlink items from the CNN site.
    G. The system can extract the hyperlinks using `webLinks(url='https://www.cnn.com')`.
    H. The system needs to extract the text items from the CNN site.
    I. The system can extract the text using `webText(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: 
    A. `webMenus(url='https://www.cnn.com')`
    B. `webImages(url='https://www.cnn.com')`
    C. `webLinks(url='https://www.cnn.com')`
    D. `webText(url='https://www.cnn.com')`
6. Example Response: "The website contains various news articles, a section for videos, and a section for opinion pieces."

###Process Flow###
1. Recognize the user's request for website menu items.
2. Acknowledge the need to access and present the main content categories or sections of a website.
3. Retrieve the menu items from the specified website URL.
4. Present the extracted menu items in a descriptive format for user comprehension.

###Objectives###
1. To provide users with a clear overview of a website's content structure by extracting and presenting the main menu items, enhancing their understanding of the site's layout and accessible content categories. 
2. To facilitate user comprehension of website organization and content categorization, enabling users to navigate and explore web pages effectively based on the site's primary sections.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
###Parameter###
`url (str)`: The web address of the site from which menu information is to be retrieved.

###Parameter Description###
The `url` parameter necessitates a full, valid URL as a string, pinpointing the specific website whose menu structure the user wishes to explore. This input is critical for guiding the `webMenus` function to the appropriate web resource, ensuring that the resulting menu overview accurately reflects the site's content and organizational layout.

###Parameter Usage###
To effectively use this parameter, input the complete URL of the website when invoking the function. Accurate URL specification is essential for the successful extraction of menu data, facilitating an insightful summary of the website's navigational schema and primary content areas.
1. User Inquiry: "Describe the CNN website."
2. System Inference: The user seeks a description of the CNN website.
3. Internal Reasoning:
    A. The user requests an overview of the CNN website.
    B. The system needs to extract the menu items from the CNN site.
    C. The system can extract the menus using `webMenus(url='https://www.cnn.com')`.
    D. The system needs to extract the image items from the CNN site.
    E. The system can extract the images using `webImages(url='https://www.cnn.com')`.
    F. The system needs to extract the hyperlink items from the CNN site.
    G. The system can extract the hyperlinks using `webLinks(url='https://www.cnn.com')`.
    H. The system needs to extract the text items from the CNN site.
    I. The system can extract the text using `webText(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call:
    A. `webMenus(url='https://www.cnn.com')`
    B. `webImages(url='https://www.cnn.com')`
    C. `webLinks(url='https://www.cnn.com')`
    D. `webText(url='https://www.cnn.com')`
6. Example Response: "The website contains various news articles, a section for videos, and a section for opinion pieces."

###Process Flow###
1. Recognize the user's request for website menu items.
2. Acknowledge the need to access and present the main content categories or sections of a website.
3. Retrieve the menu items from the specified website URL.
4. Present the extracted menu items in a descriptive format for user comprehension.

###Objective###
1. To provide users with a clear and succinct overview of a website's menu structure, enhancing their understanding of the site's organizational scheme and available content.

"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webForms"
description = """
###Function Overview###
The `webForms(url: (str))` function is tailored to identify and return information about forms present on a specified website URL. It plays a pivotal role in summarizing or describing websites, especially when users are interested in understanding the types of interactions available, such as subscriptions, contacts, or feedback opportunities. By fetching details about forms, this function aids in providing a comprehensive overview of a website's engagement and data collection mechanisms.

###!!!IMPORTANT NOTE!!!###
1. This function is designed to extract and present information about forms available on websites, offering users insights into the interactive elements and data submission opportunities.
2. The extracted form details should reflect the types of forms present on the web page, providing a clear picture of the site's interactive features.
3. The function serves as a valuable resource for addressing user queries related to website forms, enhancing user comprehension of the site's functionalities.

###When to Call the Function###
-Invoke this function in response to queries about the presence and types of forms on a website, particularly when a user seeks a descriptive summary of the site.
-It is especially relevant when users wish to know about the interactive elements or data submission opportunities a website offers through its forms.

###Parameters###
- `url (str)`: The full URL of the website from which information about forms is to be extracted. This parameter must be a valid web address that directs to the intended online resource.

###Returns###
- `forms (str)`: A natural language summary of the forms found on the specified website. This output should enumerate the different types of forms present, such as subscription, contact, feedback, or any other specialized forms, providing a clear picture of the site's interactive features.

###Example Usage###
1. User Inquiry: "Are there any forms on 'https://www.cnn.com'?"
2. System Inference: The user seeks information about forms on 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract information about the forms on the CNN website.
    C. The system can extract the forms using `webForms(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webForms(url='https://www.cnn.com')`
6. Example Response: "The website contains subscription forms, contact forms, and feedback forms."

###Process Flow###
1. Recognize the user's request for website form information.
2. Acknowledge the need to access and present details about the forms available on a website.
3. Retrieve the form information from the specified website URL.
4. Present the extracted form details in a descriptive format for user comprehension.

###Objectives###
1. To provide users with a comprehensive overview of a website's interactive elements by extracting and presenting information about the forms available, enhancing their understanding of the site's engagement features.
2. To facilitate user comprehension of website functionalities and data collection mechanisms, enabling users to explore and interact with web pages effectively based on the available forms.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
###Parameter###
`url (str)`: The web address of the site from which form information is to be extracted.

###Parameter Description###
The `url` parameter is crucial for specifying the website to be analyzed for forms. It requires a string input that accurately reflects the full URL of the website in question. This parameter ensures the function targets the correct webpage, facilitating the retrieval of detailed information about any forms present on the site.

###Parameter Usage###
To use this parameter effectively, input the complete URL of the website when invoking the function. It is vital to ensure the URL is correct and points to an accessible site to successfully extract information about forms available on the webpage.
1. User Inquiry: "Are there any forms on 'https://www.cnn.com'?"
2. System Inference: The user seeks information about forms on 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract information about the forms on the CNN website.
    C. The system can extract the forms using `webForms(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webForms(url='https://www.cnn.com')`
6. Example Response: "The website contains subscription forms, contact forms, and feedback forms."

###Process Flow###
1. Recognize the user's request for website form information.
2. Acknowledge the need to access and present details about the forms available on a website.
3. Retrieve the form information from the specified website URL.
4. Present the extracted form details in a descriptive format for user comprehension.

###Objective###
1. To facilitate the identification and understanding of interactive elements, specifically forms, on a given website, thereby assisting users in navigating webpages and engaging with site content.
2. To enhance user comprehension of website functionalities and data collection mechanisms by providing detailed insights into the types of forms available on a site.
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webQuery"
description = """
###Function Overview###
The `webQuery(query: (str))` function is an essential tool for querying the web through Wolfram Alpha's API, providing access to a broad spectrum of real-time data and information that extends beyond the agent's current knowledge. This function is invaluable for answering user queries that demand the latest information or delve into areas requiring up-to-date data, including but not limited to, mathematical solutions, scientific facts, and general knowledge across a variety of domains.

###!!!IMPORTANT NOTE!!!###
1. This function leverages Wolfram Alpha's extensive knowledge base to retrieve precise and relevant information based on user queries, ensuring that the responses are current and accurate.
2. The function is designed to facilitate real-time data retrieval and analysis, enabling users to access the latest information available on the web through Wolfram Alpha's API.
3. It is a powerful tool for addressing user inquiries that necessitate up-to-date data, scientific explanations, mathematical solutions, or general knowledge beyond the agent's knowledge cutoff date.

###When to Call the Function###
-This function should be utilized for queries seeking information that is contemporary or beyond the agent's last update.
-It is ideal for situations where users require precise, current data on topics such as demographics, scientific concepts, mathematical problems, or any content that necessitates access to Wolfram Alpha's extensive database.

###Parameters###
- `query (str)`: A concise, well-formulated query based on the user's request. This should be structured to precisely convey the user's intent to the webQuery function, utilizing English and adhering to best practices for query formulation. If dealing with mathematical or scientific queries, ensure the expression is correctly formatted in Markdown syntax.

###Returns###
- `query_results (str)`: The outcome of the query, articulated in natural language. This response encapsulates the essential information or data requested by the user, formatted to facilitate easy comprehension and direct applicability.

###Example Usage###
##General Knowledge Query##
1. User Query: "When was the Baltimore Bridge Collapse?"
2. System Inference: The user seeks information about Baltimore Bridge collapse.
3. Internal Reasoning:
    A. The user inquires about the Baltimore Bridge collapse.
    B. The system may attempt to use its internal knowledge base but may not have the most recent information.
    C. The system recognizes the need to query the web for up-to-date information.
    D. The system needs to query the web for up to date information on the Baltimore Bridge collapse.
    E. The system can obtain up-to-date information using `webQuery(query: (str))`.
4. Parameter Input:
    A. `query`: "Baltimore Bridge Collapse"
5. Function Call: `webQuery(query="Baltimore Bridge Collapse")`
6. Example Response: "The Baltimore Bridge collapse occurred on..."

##Mathematical Query##
1. User Query: "Solve the equation x^2 + 4x + 4 = 0."
2. System Inference: The user requests a solution to the quadratic equation.
3. Internal Reasoning:
    A. The user presents a quadratic equation for solution.
    B. The system recognizes the need for a mathematical solution.
    C. The system can solve the equation using `webQuery(query: (str))`.
    D. The system must convert the equation to Markdown format for accurate processing.
4. Parameter Input:
    A. `query`: "$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$"
5. Function Call: `webQuery(query="$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$")`
6. Example Response: "The solution to the equation x^2 + 4x + 4 = 0 is x = -2."
7. Follow up: `query_results` can be used to provide additional details or steps if needed.

##Scientific Query##
1. User Query: "Does the derivation of centripetal acceleration from the gravity potential assume an inertial frame of reference?"
2. System Inference: The user seeks clarification on the derivation of centripetal acceleration.
3. Internal Reasoning:
    A. The user inquires about the derivation of centripetal acceleration.
    B. The system recognizes the need for a scientific explanation.
    C. The system can provide an explanation using `webQuery(query: (str))`.
    D. The system must ensure the query is accurately formulated in English.
4. Parameter Input:
    A. `query`: "Derivation of centripetal acceleration from gravity potential"
5. Function Call: `webQuery(query="Derivation of centripetal acceleration from gravity potential")`
6. Example Response: "The derivation of centripetal acceleration from the gravity potential does not assume an inertial frame of reference."

###Best Practices###
-**Query Precision**: Craft each query to reflect the user's specific request, ensuring clarity and specificity to obtain the most accurate and relevant results from Wolfram Alpha.
-**Query Language**: Submit queries in English, translating any user requests from other languages to ensure compatibility with the API.
-**Formatting**: Adhere strictly to recommended formatting guidelines, especially for mathematical and scientific queries, to enhance the precision of the results.
-**Assumption Management**: Should the initial results be unsatisfactory or irrelevant, examine provided assumptions for a more targeted query or adjust the query based on available guidance without departing significantly from the user's original request.

###Operational Note###
Utilizing the `webQuery(query: (str))` function effectively broadens the agent's capability to furnish users with accurate, up-to-date information, leveraging Wolfram Alpha's comprehensive knowledge base to meet and exceed user expectations in real-time data retrieval and analysis.
webQuery understands natural language queries about entities in chemistry, physics, geography, history, art, astronomy, and more.
-webQuery performs mathematical calculations, date and unit conversions, formula solving, etc.
-Convert inputs to simplified keyword queries whenever possible (e.g. convert "how many people live in France" to "France population").
-Send queries in English only; translate non-English queries before sending, then respond in the original language.
-Display image URLs with Markdown syntax: ![URL]
-ALWAYS use this exponent notation: `6*10^14`, NEVER `6e14`.
-`query` must ONLY be a single-line string.
-ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '\\( [expression] \\)' when inline.
-Never mention your knowledge cutoff date; webQuery may return more recent data.
-Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1).
-Use named physical constants (e.g., 'speed of light') without numerical substitution.
-Include a space between compound units (e.g., "Ω m" for "ohm*meter").
-To solve for a variable in an equation with units, consider solving a corresponding equation without units; exclude counting units (e.g., books), include genuine units (e.g., kg).
-If data for multiple properties is needed, make separate calls for each property.
-If a webQuery result is not relevant to the query:
    -If webQuery provides multiple 'Assumptions' for a query, choose the more relevant one(s) without explaining the initial result. If you are unsure, ask the user to choose.
    -Re-send the exact same 'input' with NO modifications, and add the 'assumption' parameter, formatted as a list, with the relevant values.
    -ONLY simplify or rephrase the initial query if a more relevant 'Assumption' or other input suggestions are not provided.
    -Do not explain each step unless user input is needed. Proceed directly to making a better API call based on the available assumptions.

###Process Flow###
1. Recognize the user's request for real-time data or information beyond the agent's current knowledge.
2. Acknowledge the need to access Wolfram Alpha's API for querying the web and retrieving up-to-date data.
3. Formulate the user's query in English, ensuring precision and adherence to formatting guidelines.
4. Submit the query to the `webQuery(query: (str))` function for processing and data retrieval.
5. Present the query results in a clear and concise manner, focusing on the key details relevant to the user's request.
6. Provide additional details or steps if necessary based on the user's inquiry or follow-up questions.

###Objective###
1. To enable users to access real-time data and information beyond the agent's knowledge cutoff date by leveraging Wolfram Alpha's API for querying the web.
2. To enhance the agent's responsiveness to user queries requiring up-to-date data, scientific explanations, mathematical solutions, or general knowledge across various domains.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.query]
type = "string"
description = """
###Parameter###
`query (str)`: The specific inquiry or request to be sent to Wolfram Alpha via the `webQuery(query: (str))` function.

###Parameter Description###
The `query` parameter is the centerpiece of the webQuery function, representing the user's question or topic of interest that is to be explored using Wolfram Alpha's API. This parameter should encapsulate the essence of the user's request in English, and when applicable, include mathematical expressions formatted in Markdown syntax. The clarity and specificity of the query are paramount in ensuring that the returned data is as relevant and accurate as possible.

###Parameter Usage###
To utilize this parameter, input should be a concise, well-phrased string that directly translates the user's intent or question into a format understandable by the Wolfram Alpha API. This may involve simplifying or refining the user's original query to meet the API's requirements while retaining the query's original purpose.
##General Knowledge Query##
1. User Query: "What is the capital of France?"
2. System Inference: The user seeks information about the capital of France.
3. Internal Reasoning:
    A. The user inquires about the capital of France.
    B. The system recognizes the need to query the web for this information.
    C. The system can query the web using `webQuery(query: (str))`.
4. Parameter Input:
    A. `query`: "capital of France"
5. Function Call: `webQuery(query="capital of France")`
6. Example Response: "The capital of France is Paris."
##Mathematical Query##
1. User Query: "Solve the equation x^2 + 4x + 4 = 0."
2. System Inference: The user requests a solution to a quadratic equation.
3. Internal Reasoning:
    A. The user presents a quadratic equation for solution.
    B. The system recognizes the need for a mathematical solution.
    C. The system can solve the equation using `webQuery(query: (str))`.
    D. The system must convert the equation to Markdown format for accurate processing.
4. Parameter Input:
    A. `query`: "$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$"
5. Function Call: `webQuery(query="$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$")`
6. Example Response: "The solution to the equation x^2 + 4x + 4 = 0 is x = -2."
7. Follow-up: `query_results` can be used to provide additional details or steps if needed.
##Scientific Query##
1. User Query: "What are the 10 densest elemental metals?"
2. System Inference: The user seeks information about the densest elemental metals.
3. Internal Reasoning:
    A. The user requests the 10 densest elemental metals.
    B. The system recognizes the need for scientific data.
    C. The system can provide the information using `webQuery(query: (str))`.
4. Parameter Input:
    A. `query`: "10 densest elemental metals"
5. Function Call: `webQuery(query="10 densest elemental metals")`
6. Example Response: "The 10 densest elemental metals are..."

###Process Flow###
1. Recognize the user's request for real-time data or information beyond the agent's knowledge cutoff date.
2. Acknowledge the need to access Wolfram Alpha's API for querying the web and retrieving up-to-date data.
3. Formulate the user's query in English, ensuring precision and adherence to formatting guidelines.
4. Submit the query to the `webQuery(query: (str))` function for processing and data retrieval.
5. Present the query results in a clear and concise manner, focusing on the key details relevant to the user's request.
6. Provide additional details or steps if necessary based on the user's inquiry or follow-up questions.

###Best Practices###
Utilizing the `webQuery(query: (str))` function effectively broadens the agent's capability to furnish users with accurate, up-to-date information, leveraging Wolfram Alpha's comprehensive knowledge base to meet and exceed user expectations in real-time data retrieval and analysis.
webQuery understands natural language queries about entities in chemistry, physics, geography, history, art, astronomy, and more.
-webQuery performs mathematical calculations, date and unit conversions, formula solving, etc.
-Convert inputs to simplified keyword queries whenever possible (e.g. convert "how many people live in France" to "France population").
-Send queries in English only; translate non-English queries before sending, then respond in the original language.
-Display image URLs with Markdown syntax: ![URL]
-ALWAYS use this exponent notation: `6*10^14`, NEVER `6e14`.
-`query` must ONLY be a single-line string.
-ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '\\( [expression] \\)' when inline.
-Never mention your knowledge cutoff date; webQuery may return more recent data.
-Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1).
-Use named physical constants (e.g., 'speed of light') without numerical substitution.
-Include a space between compound units (e.g., "Ω m" for "ohm*meter").
-To solve for a variable in an equation with units, consider solving a corresponding equation without units; exclude counting units (e.g., books), include genuine units (e.g., kg).
-If data for multiple properties is needed, make separate calls for each property.
-If a webQuery result is not relevant to the query:
    -If webQuery provides multiple 'Assumptions' for a query, choose the more relevant one(s) without explaining the initial result. If you are unsure, ask the user to choose.
    -Re-send the exact same 'input' with NO modifications, and add the 'assumption' parameter, formatted as a list, with the relevant values.
    -ONLY simplify or rephrase the initial query if a more relevant 'Assumption' or other input suggestions are not provided.
    -Do not explain each step unless user input is needed. Proceed directly to making a better API call based on the available assumptions.

###Objective###
1. To enable users to access real-time data and information beyond the agent's knowledge cutoff date by leveraging Wolfram Alpha's API for querying the web.
2. To enhance the agent's responsiveness to user queries requiring up-to-date data, scientific explanations, mathematical solutions, or general knowledge across various domains.
"""
parameters.required = ["query"]



########################################################################################################################################################################################################################

[[file_bundles]]
bundle_name = "source-code"
src_dir = "../src"
src_globs = ["**/*.py"]
dst_ext = "py"

[[file_bundles]]
bundle_name = "memory"
src_dir = "../agent"
src_globs = ["**/*.json"]
dst_ext = "json" 

[[file_bundles]]
bundle_name = "images"
src_dir = "../files"
src_globs = ["*.png", "*.jpg", "*.jpeg"]
dst_ext = "img"

[[file_bundles]]
bundle_name = "data"
src_dir = "../files"
src_globs = ["*.csv", "*.xlsx"]
dst_ext = "data"