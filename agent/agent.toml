name = "Assistant"
model = "gpt-4-turbo-preview"
instructions_file = "instructions.md"

[[tools]]
type = "code_interpreter"

[[tools]]
type = "retrieval"

[[tools]]
type = "function"
[tools.function]
name = "getWeather"
description = """

    This function allows you to obtain the weather when a User asks for it. The user query does not have to be direct, so it should be called even when the User asks, for example, if they should bring out an umbrella.
    
    :Params:

        msg: Optional[str]

            When calling this function, you should pass a string containing a location and a time (if provided by the user).

                Example:

                    User: 'I wonder if its going to be cloudy tomorrow at 12:00 in Amsterdam.'

                    -> getWeather('tomorrow at 12:00 Amsterdam')

            If no location or time is specified. The function will default to the User's current location and time.

                Example:

                    User: 'How's the weather?'

                    -> getWeather()

    :Returns:

        weather_report: str

            A weather report with information about the weather and user Query. Deliver it in Natural language, round the temperature to the nearest degree. Omit certain details depending on context.

                Example:

                    User: 'How's the weather?'

                    -> getWeather()

                        You should respond something similar to:
                            -> 'Today is quite sunny with a temperature of 13 degrees. Seems like a good time to take a walk.'

                Example:

                    User: 'I wonder if its going to be cloudy tomorrow at 12:00 in Amsterdam.'

                    -> getWeather('tomorrow at 12:00 Amsterdam')

                        You should respond something similar to:
                            -> 'It's going to be cloudy tomorrow noon in Amsterdam, with a temperature of 11 degrees. You should bring a coat!'
"""

[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.msg]
type = "string"
description = """

    msg: Optional[str]

        When calling this function, you should pass a string containing a location and a time (if provided by the user).

            Example:

                User: 'I wonder if its going to be cloudy tomorrow at 12:00 in Amsterdam.'

                -> getWeather('tomorrow at 12:00 Amsterdam')

        If no location or time is specified. The function will default to the User's current location and time.

            Example:

                User: 'How's the weather?'

                -> getWeather()

"""

[[tools]]
type = "function"
[tools.function]
name = "getCalendar"
description = """

This function allows you to retrieve a Users calendar events. The user query does not have to be direct, so it should be called even when the User asks, for example, if they are free this evening or if they have anything planned for the weekend.
    
    :Params:

        upto: Optional[str]

            When calling this function, you should pass a string containing a time (if provided by the user). 

                Example:

                    User: 'Am I free this weekend?'

                    -> getCalendar('this weekend')

            If no time is specified. The function will default to providing the calendar events for 7 days.

                Example:

                    User: 'How's my schedule looking like?'

                    -> getCalendar()

    :Returns:

        calendar_reports: list[str]

            A calendar report with information about the Users calendar events. Deliver it in Natural language. Omit certain details depending on context.

                Example:

                    User: 'Am I free this weekend?'

                    -> getCalendar('this weekend')
                        You should respond something similar to:
                            -> This weekend you have no events scheduled. Enjoy your weekend

                            * In the calendar_reports, you will get events that pertain to the entire period between the current date of the User query, and the weekend, but any events not occuring in the weekend should be ommited, as they are not related to the User query.

                Example:

                    User: 'How's my schedule looking like?'

                    -> getCalendar()

                        -> 'This week you have 3 events: 
                                1. English exam
                                2. Dinner with Bob
                                3. Buy plane tickets
                            Seems like you have a fun week ahead, would you like me to help you prepare for any of these events?'

                            * If there are many events, avoid giving details as the response will be cluttered, instead, ask the User if they would like more details, if so, provide them, additionally, you are encouraged to assist the User for specific events, in the Above example, a good response would offer to assist with preparing for an English exam.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.upto]
type = "string"
description = """

    upto: Optional[str]

        When calling this function, you should pass a string containing a time (if provided by the user). 

            Example:

                User: 'Am I free this weekend?'

                -> getCalendar('this weekend')

        If no time is specified. The function will default to providing the calendar events for 7 days.

            Example:

                User: 'How's my schedule looking like?'

                -> getCalendar()

"""

[[tools]]
type = "function"
[tools.function]
name = "readEmail"
description = """

This function allows you to retrieve the 5 most recent emails in a User mailbox. The user query does not have to be direct.

    :Params:

        There are no parameters to pass for this function

    :Returns:

        email_reports: list[str]

            A email report with information about the Users emails. Deliver it in Natural language. Omit certain details depending on context.

                Example:

                        User: 'Do I have any new mail?'

                        -> readEmails()

                            -> 'Here are your 5 most recent messages: 
                                    1. EMAIL 1 Subject
                                    2. EMAIL 2 Subject
                                    3. EMAIL 3 Subject
                                    4. EMAIL 4 Subject
                                    5. EMAIL 5 Subject'

                                * Avoid giving details as the response will be cluttered, instead, ask the User if they would like more details, if so, provide them. If the user asks for more details about an email specifically, a good follow up message would include all information for that specific email in the email_reports.
                                
                                * Additionally, you are encouraged to assist the User for specific events in follow up messages. If a user asks for details on a specific email, offer assistance regarding the email body.

                                * If a user asks for details, you can also offer to reply to the email. If the user agrees, refer to the sendEmail function with the sender as recipient.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]

[[tools]]
type = "function"
[tools.function]
name = "writeEmail"
description = """

This function allows you to compose an email. The user query does not have to be direct.

THIS IS A PREREQUISITE FUNCTION FOR THE sendEmail FUNCTION. You should call this function before calling the sendEmail function.
IF A USER PASSES A NAME INSTEAD OF AN EMAIL ADDRESS AS A RECIPIENT, CALL THE getContacts FUNCTION WITH THE NAME AS PARAMETER, AND USE THE EMAIL RETURNED AS RECIPIENT.

    :Params:

        recipients: list[str]

            When calling this function, you should pass a list of strings containing the recipients of the email.
            IF A USER PASSES A NAME INSTEAD OF AN EMAIL ADDRESS AS A RECIPIENT, CALL THE getContacts FUNCTION WITH THE NAME AS PARAMETER, AND USE THE EMAIL RETURNED AS RECIPIENT.

                Example:

                    User: 'Send an email to John.Doe@outlook.com'

                    -> writeEmail([John.Doe@outlook.com], 'Subject', 'Body')

        subject: str

            When calling this function, you should pass a string containing the subject of the email.

                Example:

                    User: 'Send an email to John Doe about the project'

                    -> writeEmail([John Doe], 'Action Plan for Project', 'Body')

        body: str

            When calling this function, you should pass a string containing the body of the email.

                Example:

                    User: 'Send an email to John Doe about the project, asking if he has any updates'

                    * For all emails, you should compose the body of the email in a way that is polite and professional; do not be overly verbose unless otherwise specified by the user.

                    -> writeEmail([John Doe], 'Subject', 'Body')

        attachments: Optional[list[str]]

            When calling this function, you should pass a list of strings containing the paths to the attachments of the email.

                Example:

                    User: 'Send an email to John Doe about the project, asking if he has any updates, and attach the project plan'

                    -> writeEmail([John Doe], 'Subject', 'Body', ['path/to/attachment1', 'path/to/attachment2'])

    :Returns:

        email_reports: list[str]

            A string containing the email recipient, subject, body, and attachment paths. Deliver the confirmation message in Natural language, EXACTLY IN THE WAY YOU WILL PASS THESE ATTRIBUTES TO the sendEmail function.
            Keep the mail object in memory for future reference.

                Example:

                        User: 'Write an email to John.Doe@outlook.com about the project, asking if he has any updates, and attach the project plan: project_plan.pdf'

                        -> writeEmail([John.Doe@outlook.com], 'Action Plan for Project', **Body**, [project_plan.pdf])

                            * The body parameter of the email should be composed in a way that is polite and professional unless otherwise specified by the user. Do not be overly verbose.

                            Good example:
                                Good aftenoon John,

                                I hope this message finds you well. I am writing to inquire if you have any updates on the project. I have attached the project plan for your reference.
                            
                            Bad example:

                                Hey John, I need to know if you have any updates on the project. I have attached the project plan.

                            -> email_report: str

                                * Your response should look something like this:
                                    -> Your email to John.Doe@outlook.com has been composed:
                                        Subject: Action Plan for Project
                                        Body: I hope this message finds you well. I am writing to inquire if you have any updates on the project. I have attached the project plan for your reference.
                                        Attachments: project_plan.pdf
                                    
                                    Would you like to send it now?

                                    **IF THE USER AGREES TO SEND THE EMAIL, REFER TO THE sendEmail FUNCTION WITH THE EXACT SAME PARAMETERS AS DISPLAYED TO THE USERS.**
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """

    recipient: str

        When calling this function, you should pass a string containing the recipient of the email.

            Example:

                User: 'Send an email to John.Doe@outlook.com'

                -> writeEmail([John.Doe@outlook.com], 'Subject', 'Body')

"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """

    subject: str

        When calling this function, you should pass a string containing the subject of the email.

            Example:

                User: 'Send an email to John Doe about the project'

                -> writeEmail('John Doe', 'Action Plan for Project', 'Body')

"""
[tools.function.parameters.properties.body]
type = "string"
description = """

    body: str

        When calling this function, you should pass a string containing the body of the email.

            Example:

                User: 'Send an email to John Doe about the project, asking if he has any updates'

            * For all emails, you should compose the body of the email in a way that is polite and professional; do not be overly verbose unless otherwise specified by the User.

                -> writeEmail('John Doe', 'Subject', **BODY**)

"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """

    attachments: Optional[list[str]]

        When calling this function, you should pass a list of strings containing the paths to the attachments of the email.

            Example:

                User: 'Send an email to John Doe about the project, asking if he has any updates, and attach the project plan project_plan.pdf' 

                -> writeEmail('John Doe', 'Subject', 'Body', ['project_plan.pdf'])

"""
[tools.function.parameters.properties.attachments.items]
type = "string"


[[tools]]
type = "function"
[tools.function]
name = "sendEmail"
description = """

Send an email to the recipient. This function should be called after the writeEmail function AND USER CONFIRMATION.

THIS IS A FOLLOWUP FUNCTION FOR THE writeEmail FUNCTION. You should call this function after calling the writeEmail function.

    :Params:

        recipients: list[str]

            The recipients diplayed in writeEmail

        subject: str

            The subject diplayed in writeEmail

        body: str

            The body displayed in writeEmail

        attachments: Optional[list[str]]

            The attachments displayed in writeEmail

    :Returns:

        email_reports: str

            A string containing the status of the sent email.

                Example:

                        User: 'looks good, send it'

                        -> sendEmail([John.Doe@outlook.com], 'Action Plan for Project', **Body**, [project_plan.pdf])

                            * The body parameter of the email should be composed in a way that is polite and professional unless otherwise specified by the user. Do not be overly verbose.

                            'Email sent successfully!'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """

    recipient: str

        The recipients displayed in writeEmail

"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """

    subject: str

        The subject diplayed in writeEmail

"""
[tools.function.parameters.properties.body]
type = "string"
description = """

    body: str

        The body displayed in writeEmail

"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """

    attachments: Optional[list[str]]

        The attachment list displayed writeEmail

"""
[tools.function.parameters.properties.attachments.items]
type = "string"

[[tools]]
type = "function"
[tools.function]
name = "getLocation"
description = """

Gets the Users current location. The user query does not have to be direct.

    :Params:

        There are no parameters to pass for this function

    :Returns:

        location: str

            A string containing the Users current location. Deliver it in Natural language.

                Example:

                    User: 'Where am I?'

                    -> getLocation()

                        -> 'You are currently in Amsterdam, Netherlands'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]

[[tools]]
type = "function"
[tools.function]
name = "getDate"
description = """

Gets the current date. The user query does not have to be direct.

    :Params:

        There are no parameters to pass for this function

    :Returns:

        date: str

            A string containing the current date. Deliver it in Natural language.

                Example:

                    User: 'What time is it?'

                    -> getDate()

                        -> 'Its 13:08 right now.'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]


[[tools]]
type = "function"
[tools.function]
name = "writeCalendarEvent"
description = """

This function allows you to compose a calendar event. The user query does not have to be direct. 
THIS IS A PREREQUISITE FUNCTION FOR THE createCalendarEvent FUNCTION. You should call this function before calling the createCalendarEvent function.

    :Params:

        subject: str

            When calling this function, you should pass a string containing the title / subject of the event.

                Example:

                    User: 'Create an event for the English exam'

                    * In this example, the user does not pass a start time [obligatory field], so you should call getDate() to get the current date and time and pass that as the start time.

                    -> getDate() -> writeCalendarEvent('English exam', '2024-12-12T12:00:00')

        start: str

            When calling this function, you should pass a string containing the start time of the event.

                Example:

                    User: 'Create an event for the English exam next week'

                    -> writeCalendarEvent('English exam', 'next week')

            If no start time is passed, you should call getDate() to get the current date and time and pass that as the start time.

                Example:

                    User: 'Create an event for the English exam'

                    -> getDate() -> writeCalendarEvent('English exam', '2024-12-12T12:00:00')

        end: str

            When calling this function, if provided by the user, you should pass a string containing the end time of the event.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00'

                    -> writeCalendarEvent('English exam', 'one week 12:00', 'one week 14:00')

        location: Optional[str]

            When calling this function, if the user specifies it, you should pass a string containing the location of the event.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> writeCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')
        
        recurrence: Optional[bool]

            When calling this function, if requested by the user, you should pass a boolean value indicating if the event is recurring.

                Example:

                    User: 'Create a weekly recurring event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> writeCalendarEvent('English exam', '2023-12-12T12:00:00', '2023-12-12T14:00:00', 'University of Amsterdam', True)

    :Returns:

        calendar_reports: str

            A string containing the event title, start time, end time, and location. Deliver the confirmation message in Natural language, EXACTLY IN THE WAY YOU WILL PASS THESE ATTRIBUTES TO the createCalendarEvent function.
            Keep the calendar report in memory for future reference.

                Example:

                    User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                    -> writeCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')

                            -> 'Your event for the English exam has been created:
                                    Start: 2024-12-12T12:00:00
                                    End: 2024-12-12T14:00:00
                                    Location: University of Amsterdam
                                    Recurring: No
                                    
                                    Would you like to save it?'

                                    **IF THE USER AGREES TO SAVE THE EVENT
                                    REFER TO THE createCalendarEvent FUNCTION WITH THE EXACT SAME PARAMETERS AS DISPLAYED TO THE USERS.**

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """

    subject: str

        When calling this function, you should pass a string containing the title / subject of the event.

            Example:

                User: 'Create an event for the English exam'

                * In this example, the user does not pass a start time [obligatory field], so you should call getDate() to get the current date and time and pass that as the start time.

                -> getDat() -> writeCalendarEvent('English exam', '2024-12-12T12:00:00')

"""
[tools.function.parameters.properties.start]
type = "string"
description = """

    start: str

        When calling this function, you should pass a string containing the start time of the event.

            Example:

                User: 'Create an event for the English exam next week'

                -> writeCalendarEvent('English exam', 'next week')

        If no start time is passed, you should call getDate() to get the current date and time and pass that as the start time.

            Example:

                User: 'Create an event for the English exam'

                -> getDate() -> writeCalendarEvent('English exam', '2024-12-12T12:00:00')


"""
[tools.function.parameters.properties.end]
type = "string"
description = """

    end: str

        When calling this function, if provided by the user, you should pass a string containing the end time of the event.

            Example:

                User: 'Create an event for the English exam in one week from 12:00 to 14:00'

                -> writeCalendarEvent('English exam', 'one week 12:00', 'one week 14:00')


"""
[tools.function.parameters.properties.location]
type = "string"
description = """

    location: Optional[str]

        When calling this function, if the user specifies it, you should pass a string containing the location of the event.

            Example:

                User: 'Create an event for the English exam in one week from 12:00 to 14:00 at the University of Amsterdam'

                -> writeCalendarEvent('English exam', 'one week 12:00', 'one week 14:00', 'University of Amsterdam')

"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """

    recurrence: Optional[bool]

        When calling this function, you should pass a boolean value indicating if the event is recurring.

            Example:

                User: 'Create a recurring event for the English exam'

                -> writeCalendarEvent('English exam', '2023-12-12T12:00:00', '2023-12-12T14:00:00', 'University of Amsterdam', True)

"""

[[tools]]
type = "function"
[tools.function]
name = "createCalendarEvent"
description = """

Create a calendar event. This function should be called after the writeCalendarEvent function AND USER CONFIRMATION.

THIS IS A FOLLOWUP FUNCTION FOR THE writeCalendarEvent FUNCTION. You should call this function after calling the writeCalendarEvent function.

    :Params:

        subject: str

            The subject displayed in writeCalendarEvent

        start: str

            The start time displayed in writeCalendarEvent

        end: str

            The end time displayed in writeCalendarEvent

        location: Optional[str]

            The location displayed in writeCalendarEvent

        recurrence: Optional[bool]

            The recurrence displayed in writeCalendarEvent

    :Returns:

        calendar_reports: str

            A string containing the status of the created event.

                Example:

                        User: 'looks good, save it'

                        -> createCalendarEvent('English exam', '2024-12-12T12:00:00', '2024-12-12T14:00:00', 'University of Amsterdam', False)

                            'Event saved successfully!'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """

    subject: str

        The subject displayed in writeCalendarEvent

"""
[tools.function.parameters.properties.start]
type = "string"
description = """

    start: str

        The start time displayed in writeCalendarEvent

"""
[tools.function.parameters.properties.end]
type = "string"
description = """

    end: str

        The end time displayed in writeCalendarEvent

"""
[tools.function.parameters.properties.location]
type = "string"
description = """

    location: Optional[str]

        The location displayed in writeCalendarEvent

"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """

    recurrence: Optional[bool]

        The recurrence displayed in writeCalendarEvent

"""

[[tools]]
type = "function"
[tools.function]
name = "getContacts"
description = """

This function allows you to retrieve the Users contacts. The user query does not have to be direct.
This function has two modes of operation, one where the User asks for their contacts, and one where the User asks for a specific contact.
If the user asks for their contacts, call the function without passing any parameters. If the user asks for a specific contact, pass the name of the contact as a parameter.

!!! Additionally, this function MUST be called if the User asks to send an email to a contact and uses a name (instead of an email address) as a recipient. In this case, call the function with the passed name, and use the email returned by the function to send the email. !!!

    :Params:

        name: Optional[str]

            If the user asks for a specific contact, or if the function is called to determine an email recipient, you should pass a string containing the name of the contact.

                Example:

                    User: 'Send an email to John Doe'

                    -> getContacts('John Doe')

                        !!! You will get a contact report containing an email matching to John Doe. !!!

                        -> writeEmail('john.doe@outlook.com', Subject, Body)

                            -> Request user confirmation

                                -> sendEmail('john.doe@outlook.com', Subject, Body)


    :Returns:

        contacts: list[str]

            A list of strings containing the Users contacts. Deliver it in Natural language. If a specific contact is requested, the contact report will contain the best matches (above 80% similarity) to the requested name.

                Example:

                    User: 'Who are my contacts?'

                    -> getContacts()

                        -> 'Your contacts are: 
                                1. John Doe
                                2. Jane Doe
                                3. Bob Smith
                                4. Alice Johnson
                                5. Tom Brown'

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.name]
type = "string"
description = """

    name: Optional[str]

        If the user asks for a specific contact, or if the function is called to determine an email recipient, you should pass a string containing the name of the contact.

            Example:

                User: 'Send an email to John Doe'

                -> getContacts('John Doe')

                    !!! You will get a contact report containing an email matching to John Doe. !!!

                    -> writeEmail('john.doe@outlook.com', Subject, Body)

                        -> Request user confirmation

                            -> sendEmail('john.doe@outlook.com, Subject, Body)

        * If multiple matches are found, ask the user to specify the contact further, or provide the best match.

"""

# [[tools]]
# type = "function"
# [tools.function]
# name = "csvQuery"
# description = """

# A function to query a .csv or excel file. The user query does not have to be direct. 

# DO NOT ATTEMPT TO ANALYZE A CSV OR XLSX FILE WITHOUT CALLING THIS FUNCTION

# DO NOT PASS THE FILE-ID KNOWN TO YOU AS PATH, PASS THE NAME OF THE FILE GIVEN BY THE USER.

#     :Params:

#         path: str

#             When calling this function, you should pass a string containing the path to the .csv file.
#             DO NOT PASS THE FILE-ID KNOWN TO YOU AS PATH, PASS THE NAME OF THE FILE GIVEN BY THE USER.

#                 Example:

#                     User: 'What is the total revenue for the year 2023 in finance.csv?'

#                     -> csvQuery('finance.csv', 'total revenue for the year 2023')

#         query: str

#             When calling this function, you should pass a string containing the query you want to perform on the .csv file.

#                 Example:

#                     User: 'What is the total revenue for the year 2023?'

#                     -> csvQuery(path, 'total revenue for the year 2023')

#     :Returns:

#         query_results: str

#             A string containing the results of the query. Deliver it in Natural language.

#                 Example:

#                     User: 'What is the total revenue for the year 2023?'

#                     -> csvQuery('total revenue for the year 2023')

#                         -> 'The total revenue for the year 2023 is $1,000,000'


# """
# [tools.function.parameters]
# type = "object"
# [tools.function.parameters.properties.path]
# type = "string"
# description = """

#     path: str

#         When calling this function, you should pass a string containing the path to the .csv file.

#             Example:

#                 User: 'What is the total revenue for the year 2023?'

#                 -> csvQuery('path/to/file.csv', 'total revenue for the year 2023')

# """
# [tools.function.parameters.properties.query]
# type = "string"
# description = """

#     query: str

#         When calling this function, you should pass a string containing the query you want to perform on the .csv file.

#             Example:

#                 User: 'What is the total revenue for the year 2023?'

#                 -> csvQuery(path, 'total revenue for the year 2023')

# """

[[tools]]
type = "function"
[tools.function]
name = "findFile"
description = """

A helper function to find a file_id by name.
ALWAYS CALL THIS FUNCTION BEFORE ATTEMPTING TO OPEN A FILE FOR WHICH THE FILE_ID IS UNCERTAIN.
USE THE FILE_ID RETURNED BY THIS FUNCTION TO FIND THE FILE IN YOUR FILESYSTEM.
ANY FILE OPERATIONS SHOULD BE PERFORMED USING THE FILE_ID RELATING TO THE FILE QUERIED BY THE USER SHOULD BE RETURNED BY THIS FUNCTION.

    :Params:

        filename: str

            When calling this function, you MUST pass a string containing the name of the file the USER wants to use, NOT THE FILE ID's KNOWN TO YOU.
            THE OUTPUT WILL BE THE FILE_ID KNOWN TO YOU.

                Example:

                    User: 'what was the average revenue for the year 2023 in 'finance.csv'?'

                    -> findFile(client=client, asst_id=asst_id, 'finance.csv')


    :Returns:

        file_id: str

            A string containing the file_id to locate the file. THIS IS THE ONLY WAY TO LOCATE THE FILE IN YOUR FILESYSTEM.

            THIS FUNCTION DOES NOT OPEN THE FILE, IT ONLY RETURNS THE FILE_ID.

            THIS OUTPUT SHOULD NOT BE SHOWN TO THE USER.

            THIS OUTPUT IS USED AS AN INTERMEDIATE STEP FOR YOUR CODE INTERPRETER

                Example:

                    User: 'what was the average revenue for the year 2023 in finance.csv?'

                    -> findFile(client=client, asst_id=asst_id, 'finance.csv')

                        -> 'file-O3ERIFyoZTQeZZWqDDwAvPVL'

                        Use this file_id to locate the file in your filesystem.
                        Perform data analysis using built in code-interpreter functions.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.filename]
type = "string"
description = """

    filename: str

        When calling this function, you MUST pass a string containing the name of the file the USER wants to use, NOT THE FILE ID's KNOWN TO YOU.

            Example:

                User: 'How many users are in people.csv?'

                -> findFile(client=client, asst_id=asst_id, 'people.csv')

                    -> 'file-O3ERjeufvTQeZZWqDDwAvPVL'

"""
parameters.required = ["filename"]


[[tools]]
type = "function"
[tools.function]
name = "webText"
description = """

THIS TOOL GIVES YOU THE ABILITY TO ACCESS REAL TIME DATA FROM THE WEB. USE THIS FUNCTION TO GET TEXT FROM A WEBSITE. CALL THIS FUNCTION WHEN THE USER ASKS FOR INFORMATION FROM A WEBSITE, OR IF THE USER ASKS TO SUMMARIZE / EXPLAIN A WEBSITE.

A function to get text from a website. Call this function when the user asks for information from a website, or if the user asks to summarize a website.

THIS FUNCTION SHOULD ALWAYS BE CALLED BEFORE YOU RESPOND YOU ARE NOT CAPABLE OF ACCESSING REAL TIME DATA.

ONLY RESPOND YOU ARE NOT CAPABLE OF ACCESSING REAL TIME DATA IF THIS FUNCTION RETURNS AN ERROR.

    :Params:

        url: str

            When calling this function, you should pass a string containing the URL of the website.

                Example:

                    User: 'What is the latest news on CNN?'

                    -> webText('https://www.cnn.com')

    :Returns:

        text: str

            A string containing the text from the website. Deliver it in Natural language.

                Example:

                    User: 'What is the latest news on CNN?'

                    -> webText('https://www.cnn.com')

                        -> 'The latest news on CNN is...'

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'What is the latest news on CNN?'

                -> webText('https://www.cnn.com')

"""
parameters.required = ["url"]

[[tools]]
type = "function"
[tools.function]
name = "webImages"
description = """

A function to get an image from a website.

    :Params:

        url: str

            When calling this function, you should pass a string containing the URL of the website.

                Example:

                    User: 'Show me the latest image on CNN'

                    -> webImages('https://www.cnn.com')

    :Returns:

        image: str

            A string containing the image from the website. Deliver it in Natural language.

                Example:

                    User: 'Show me the latest image on CNN'

                    -> webImages('https://www.cnn.com')

                        -> 'The latest image on CNN is...'

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'Show me the latest image on CNN'

                -> webImage('https://www.cnn.com')

"""
parameters.required = ["url"]

[[tools]]
type = "function"
[tools.function]
name = "webLinks"
description = """

A function to get links from a website.

    :Params:

        url: str

            When calling this function, you should pass a string containing the URL of the website.

                Example:

                    User: 'What are the latest links on CNN?'

                    -> webLinks('https://www.cnn.com')

    :Returns:

        links: list[str]

            A list of strings containing the links from the website. Deliver it in Natural language.

                Example:

                    User: 'What are the latest links on CNN?'

                    -> webLinks('https://www.cnn.com')

                        -> 'The latest links on CNN are...'

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'What are the latest links on CNN?'

                -> webLinks('https://www.cnn.com')

"""
parameters.required = ["url"]

[[tools]]
type = "function"
[tools.function]
name = "webMenus"
description = """

A function to get menus from a website.

    :Params:

        url: str

            When calling this function, you should pass a string containing the URL of the website.

                Example:

                    User: 'Describe the CNN website?'

                    -> webMenus('https://www.cnn.com')

    :Returns:

        menus: list[str]

            A list of strings containing the menus from the website. Deliver it in Natural language.

                Example:

                    User: 'Describe the CNN website'

                    -> webMenus('https://www.cnn.com')

                        -> 'The website contains various news articles, a section for videos, and a section for opinion pieces.'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'Describe the CNN website'

                -> webMenus('https://www.cnn.com')

"""
parameters.required = ["url"]

[[tools]]
type = "function"
[tools.function]
name = "webForms"
description = """

A function to get forms from a website.

    :Params:

        url: str

            When calling this function, you should pass a string containing the URL of the website.

                Example:

                    User: 'What forms are available on the CNN website?'

                    -> webForms('https://www.cnn.com')

    :Returns:

        forms: str

            A list of strings containing the forms from the website. Deliver it in Natural language.

                Example:

                    User: 'What forms are available on the CNN website?'

                    -> webForms('https://www.cnn.com')

                        -> 'The website contains a form for signing up for a newsletter, a form for submitting feedback, and a form for contacting customer support.'
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """

    url: str

        When calling this function, you should pass a string containing the URL of the website.

            Example:

                User: 'What forms are available on the CNN website?'

                -> webForms('https://www.cnn.com')

"""
parameters.required = ["url"]


[[file_bundles]]
bundle_name = "source-code"
src_dir = "../src"
src_globs = ["**/*.py"]
dst_ext = "py"

[[file_bundles]]
bundle_name = "memory"
src_dir = "../agent"
src_globs = ["**/*.json"]
dst_ext = "json" 

[[file_bundles]]
bundle_name = "images"
src_dir = "../files"
src_globs = ["*.png", "*.jpg", "*.jpeg"]
dst_ext = "img"

[[file_bundles]]
bundle_name = "data"
src_dir = "../files"
src_globs = ["*.csv", "*.xlsx"]
dst_ext = "data"