name = "Assistant"
model = "gpt-4-turbo-2024-04-09"
instructions_file = "instructions.md"


########################################################################################################################################################################################################################


[[tools]]
type = "code_interpreter"


########################################################################################################################################################################################################################


[[tools]]
type = "retrieval"


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getWeather"
description = """
Gets the weather. If the user asks about the weather without specifying a location or time, the system defaults to the user's current location and time. If the user provides a specific location or time, the system uses that information to fetch the weather details.
"""

[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.msg]
type = "string"
description = """
`msg (Optional[str])`: Use this parameter to input specific details about the desired weather report's location and time, as mentioned by the user. In the absence of explicit information, the system defaults to the user's current location and time.

### Parameter Examples ###
## Indirect Inquiry ##
1. User Inquiry: "Should I take an umbrella today?"
2. System Inference: The question suggests a need to know about precipitation chances for the current day and location.
3. Usage: In such cases, details about the current day and location are inferred and used by default since none are explicitly provided.

## Direct Inquiry ##
1. User Inquiry: "Will it rain tomorrow in Paris?"
2. System Inference: This is a straightforward request for precipitation chances in Paris for the following day.
3. Usage: For such direct inquiries, use specific details like "tomorrow in Paris" as the parameter.

### Using the `msg` Parameter ###
## For Specified Inquiries ##
When a user specifies a time and location in their question, encapsulate these details into a string and pass it as the parameter.
1. User Inquiry: "I wonder if it's going to be cloudy tomorrow at 12:00 in Amsterdam."
2. Function Call: `getWeather(msg='tomorrow at 12:00 Amsterdam')`
"""


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "getCalendar"
description = """
Gets the user's calendar events. If the user asks about their schedule without specifying a timeframe, the system defaults to the upcoming 7 days. If the user provides a specific timeframe, the system retrieves events within that period.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.upto]
type = "string"
description = """
`upto (Optional[str])`: Enter any specific time details mentioned by the user, like "this evening" or "next week". In cases where the user hasn't specified a timeframe, the function automatically assumes the upcoming 7 days as the default period to retrieve calendar events.

### Parameter Usage Examples ###
## Indirect Time Inquiry ##
Scenario: A user hints at wanting to know their availability for a specific time without directly asking for their schedule, e.g., "Should I plan something for Saturday?"
1. Parameter Input: In response, you would input "Saturday" into the `upto` parameter to focus the query on the weekend's schedule.
2. Function Call: `getCalendar(upto='Saturday')`

## General Time Inquiry ##
Scenario: A user poses a broad question about their schedule, such as "What's my schedule like?"
1. User Inquiry: "What's my schedule like?"
2. System Inference: The user seeks an overview of their upcoming events without specifying a timeframe.
3. Parameter Input: For broader inquiries, you do not specify a timeframe in the `upto` parameter. The function then defaults to retrieving events for the next 7 days.
4. Function Call: `getCalendar()`
5. Example Response: "Your schedule for the next week includes a meeting, a doctor's appointment, and a dinner with friends. It's a busy week ahead!"

### Using the `upto` Parameter ###
## Specified Time Frame ##
When a user provides a clear indication of the time frame they're interested in, encapsulate this detail into a string and pass it to the function.
1. User Inquiry: "Am I free this weekend?"
2. System Inference: The user is seeking information about their weekend schedule.
3. Parameter Input: In this case, you would input "this weekend" into the `upto` parameter.
4. Function Call: getCalendar(upto='this weekend')
5. Example Response: "This weekend, your schedule is clear. Enjoy your free time!"

## Unspecified Time Frame ##
If the user's question lacks specific timing details, the function defaults to pulling calendar events for the forthcoming 7 days.
1. User Inquiry: "How's my schedule looking?"
2. System Inference: The user is interested in an overview of their upcoming events without specifying a timeframe.
3. Parameter Input: In such cases, you do not include a timeframe in the `upto` parameter.
4. Function Call: getCalendar()
5. Example Response: "You have 3 events lined up this week: an English exam, dinner with Bob, and ticket purchasing for your upcoming trip. It's a week full of varied activities. Do you need help preparing for any of these?"
"""

########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "readEmail"
description = """
Gets the user's 5 most recent emails. Return the emails in markdown, properly formatted.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "writeEmail"
description = """
Drafts an email for the user. This function prepares the email content, ensuring accuracy and user consent before dispatch. It is designed to be utilized before sending an email.

###!!!IMPORTANT NOTE!!!###:
1. This function must be utilized prior to sending an email. It is designed to prepare the email content, ensuring accuracy and user consent before dispatch.
2. Iterate through the email drafting process until the user confirms the email details. This iterative approach allows for adjustments based on user feedback or changes to the email content.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
### Parameter ###
`recipients (list[str])`: This parameter requires the email addresses of the intended recipients. It accommodates direct email addresses. When a user specifies a recipient by name rather than email, employ the `getContacts(name: (str))` function to ascertain the correct email address. Ensuring the accuracy of the recipient's email is paramount for successful email delivery.

### Parameter Usage ###
## Direct Email Address ##
1. User Inquiry: "Email alex@example.com about the meeting tomorrow."
2. System Inference: The user directly requests emailing 'alex@example.com' about an upcoming meeting.
3. Internal Reasoning: 
    A. The user provided the email address directly.
    B. Generate a Subject and Body based on the user's request.
4. Parameter Input: For explicit email addresses provided by the user, directly pass them as list elements.
    A. `recipients: (list[str])`: In this case, the recipient is 'alex@example.com'.
5. Function Call: writeEmail(recipients=['alex@example.com'], subject='Meeting Tomorrow', body='Here are the details...')
6. Example Response: The email composition tool would then proceed to draft the email with the provided details. Provide the response exactly as recieved, and display it to the user, asking for confirmation or if there are any changes they would like to make.

## Email Address NOT Provied ##
1. User Inquiry: "Can you send an update to Jordan?"
2. System Inference: The user wishes to send an email to 'Jordan', but only provides a name, necessitating a lookup for the email address.
3. Internal Reasoning: 
    A. The user provided a name but not an email address.
    B. Use `getContacts(name='Jordan')` to fetch the email address for the recipient.
    C. The user provided a vague request, requiring further details to compose the email.
    D. Prompt the user for additional information, asking for more details about the update.
4. User Response: "The update is regarding the project timeline. Let him know about the delay."
5. Parameter Input: When only a name is provided, use the `getContacts(name)` function with the name to retrieve the corresponding email address.
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts('Jordan')`, which provides the email address.
    B. `subject: (str)`: Generate a subject based on the user's request; for example, 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello Jordan, I wanted to inform you about the delay in the project timeline.'
    D. `attachments: (list[str])`: If any attachments are required, include them as specified by the user. (None in this case)
6. Function Call: Assuming getContacts(name='Jordan') returns 'jordan@example.com', call writeEmail(recipients=['jordan@example.com'], subject='Project Update', body='Hello Jordan, I wanted to inform you about the delay in the project timeline.').
7. Example Response: Here is your draft email to Jordan: Subject: Project Update. Body: Hello Jordan, I wanted to inform you about the delay in the project timeline. Would you like to send it now?
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.
"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
### Parameter ###
`subject (str)`: This parameter specifies the subject line of an email, encapsulating the essence and primary purpose of the message. The subject line should be concise yet descriptive enough to give the recipient a clear understanding of the email's content and importance at a glance.

### Parameter Description ###
The subject of an email is crucial for first impressions and can influence whether the email is opened promptly, deferred, or overlooked. It acts as a summary or title for the email content.

### Parameter Usage ###
## Subject Provided ##
1. User Inquiry: "Email John Doe about the project. The subject should be 'Action Plan for Project'."
2. System Inference: The user intends to contact 'John Doe' regarding a project, specifying the subject as 'Action Plan for Project'.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    A. The user provided the subject directly.
    B. Generate a Body based on the user's request.
4. Parameter Input: For explicit subject lines provided by the user, directly pass them as strings.
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Action Plan for Project'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
    E. The body is vague, prompting the user for more details.
5. User Response: "The project involves the upcoming client presentation. Request feedback by Friday."
6. System Inference: The user provides additional details about the project, specifying the need for feedback by Friday.
7. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is professional
    C. Compose the email body based on the user's request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
8. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Action Plan for Project'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
    D. In this case, no attachments are specified.
9. Function Call: `writeEmail(recipients=['John Doe'], subject='Action Plan for Project', body='Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.')`
10. Example Response: "Here is your draft email to John Doe: Subject: Action Plan for Project. Body: Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

## Subject not Provided ##
1. User Inquiry: "Email John Doe about the project."
2. System Inference: The user intends to contact 'John Doe' regarding a project.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    A. The user did not provide a subject.
    B. Generate a Body based on the user's request.
4. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
    E. The body is vague, prompting the user for more details.
5. User Response: "The project involves the upcoming client presentation. Request feedback by Friday."
6. System Inference: The user provides additional details about the project, specifying the need for feedback by Friday.
7. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is professional
    C. Compose the email body based on the user's request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
8. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: The subject is 'Project Update'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.'
    D. In this case, no attachments are specified.
9. Function Call: `writeEmail(recipients=['John Doe'], subject='Project Update', body='Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday.')`
10. Example Response: "Here is your draft email to John Doe: Subject: Project Update. Body: Hello John, I hope this message finds you well. Regarding our upcoming project, I wanted to discuss the action plan for the client presentation. Your feedback would be appreciated by Friday. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
### Parameter ###
`body (str)`: Draft the message body to convey the email's main content. It should be concise, clear, and polite. Adjust the tone based on user preference or context. 

### Parameter Description ###
The body parameter is a string that forms the core message of your email. It's essential to articulate the main points clearly, concisely, and with the appropriate level of formality or informality, depending on the recipient and the context of the email. This parameter is versatile, allowing for customization in tone to suit various scenarios—from professional communications to more casual exchanges. It's vital to maintain a polite and respectful tone throughout, ensuring the message is both engaging and professional. While brevity is appreciated, the length and detail of the body can be adjusted according to user specifications or the complexity of the subject matter.

### Parameter Usage ###
When utilizing this parameter, input a well-constructed string that effectively communicates your message, keeping in mind the desired tone and the audience's expectations. The body should include all necessary information, structured in a way that is easy to read and understand. Use paragraphs to separate thoughts or topics, and consider including a call to action or a conclusion as appropriate.

## Formal Tone Example ##
For professional or official correspondence, use a respectful greeting, clear language, and a structured layout. Example: "Dear [Recipient Name], I am writing to discuss...".
1. User Inquiry: "Email John Doe to confirm tomorrow's meeting."
2. System Inference: The user intends to contact 'John Doe' to confirm tomorrow's meeting.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    C. The user did not provide a subject.
    D. Infer the tone based on the context: Confirming a meeting typically relates to work: requires a professional tone.
    E. Generate a Body based on the user's request.
4. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='John Doe')`, which provides the email address.
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Meeting Confirmation'.
    C. `body: (str)`: Compose the email body based on the user's request; for example, 'Hello John, I am writing to confirm the meeting scheduled for tomorrow.'
    D. In this case, no attachments are specified.
5. Function Call: `writeEmail(recipients=['John Doe'], subject='Meeting Confirmation', body='Hello John, I am writing to confirm the meeting scheduled for tomorrow.')`
6. Example Response: "Here is your draft email to John Doe: Subject: Meeting Confirmation. Body: Hello John, I am writing to confirm the meeting scheduled for tomorrow. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.

## Informal Tone Example ##
For emails to friends or colleagues you have a casual relationship with, a more relaxed greeting and conversational language can be used. Example: "Hey [Recipient Name], just wanted to chat about...".
1. User Inquiry: "Email Alex asking if he wants to get lunch this weekend."
2. System Inference: The user intends to contact 'Alex' to inquire about lunch plans for the weekend.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='Alex')` to retrieve the email address.
    C. The user did not provide a subject.
    D. Infer the tone based on the context: Lunch plans are casual and friendly: requires an informal tone.
    E. Generate a Body based on the user's request.
    F. Lunch plans require a specific timeframe: prompt the user for more details.
4. User Response: "I'm free on Saturday at 13:00. Let's meet at McDonalds in Delft Center."
5. System Inference: The user provides specific details for the lunch meeting, suggesting Saturday at 13:00 at McDonalds in Delft Center.
6. Internal Reasoning: 
    A. Use the provided details to compose the email body.
    B. The tone is casual and friendly.
    C. Compose the email body based on the user's request; for example, 'Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.'
7. Parameter Input:
    A. `recipients: (list[str])`: In this case, the recipient is the output of `getContacts(name='Alex')`, which provides the email address. 
    B. `subject: (str)`: Generate the subject based on the context; for example, 'Lunch Plans'.
    C. `body: (str)`: Compose the email body based on the user's updated request; for example, 'Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.'
    D. In this case, no attachments are specified.
8. Function Call: `writeEmail(recipients='alex@example.com', subject='Lunch Plans', body='Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center.')`
    A. Assuming getContacts(name='Alex') returns 'alex@example.com'.
9. Example Response: "Here is your draft email to Alex: Subject: Lunch Plans. Body: Hey Alex, are you free for lunch this Saturday at 13:00? Let's meet at McDonalds in Delft Center. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.
10. Follow up: 
    A. If the user confirms, proceed to send the email using the `sendEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` function.
    B. Specific plans are provided, suggest to add the event to the Users' calendar with `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
### Parameter ###
`attachments (Optional[list[str]])`: Include files as email attachments by specifying their paths. Useful for sending documents, images, or other files alongside your message.

### Parameter Description ###
The `attachments` parameter allows users to attach files to an email. This list should contain the paths (as strings) to each file you wish to attach. It's designed to enhance communication by enabling the sharing of documents, images, presentations, or other relevant files directly within the email. When specifying attachments, ensure the paths are accurate and accessible to prevent errors during the email sending process.

### Parameter Usage ###
To use the `attachments` parameter, provide a list of strings, each representing the path to a file you intend to attach to the email. This enables the inclusion of multiple attachments in a single email, supporting a wide range of file types to accommodate various needs and contexts.
## Example Usage ## 
1. User Inquiry: "Email John Doe about the project, asking for feedback on the action plan, and attach the project plan: project_plan.pdf."
2. System Inference: The user wants to contact 'John Doe' regarding the project, seeking feedback on the action plan and attaching 'project_plan.pdf'.
3. Internal Reasoning: 
    A. The user provided a name.
    B. Call `getContacts(name='John Doe')` to retrieve the email address.
    C. Generate a Subject and Body based on the user's request.
    D. Attach the specified file path exactly as provided.
4. Parameter Input:
    A. `recipients: (list[str])`: The recipient is 'John.Doe@outlook.com' (Assume this is the email returned by `getContacts(name='John Doe')`.
    B. `subject: (str)`: An example generated subject is: 'Action Plan for Project'.
    C. `body: (str)`: An example composed body is: 'Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference.'
    D. `attachments: (list[str])`: The attachment is `['project_plan.pdf']`.
5. Function Call: `writeEmail(recipients=['John.Doe@outlook.com, subject='Action Plan for Project', body='Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference.', attachments=['project_plan.pdf'])`
6. Example Response: "Your email to John Doe has been composed: Subject: Action Plan for Project. Body: Hello John, I am writing to inquire if you have any feedback on the project plan. I have attached the project plan for your reference. Attachments: project_plan.pdf. Would you like to send it now?"
    A. Display the draft email to the user, seeking confirmation or any necessary modifications before proceeding to send.
    B. If the user requests changes, update the email draft accordingly by calling `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` and repeat the confirmation process.
"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]


########################################################################################################################################################################################################################


[[tools]]
type = "function"
[tools.function]
name = "sendEmail"
description = """
Send the drafted email to the specified recipients. Ensure that the email draft has been reviewed and approved by the user before executing this function. This confirmation step is crucial to prevent inadvertent or erroneous email dispatches. The `sendEmail` function should only be called after the user has explicitly consented to send the email.

### !!!Important Note!!! ###
Before executing the `sendEmail` function, ensure that the email draft has been reviewed and approved by the user. This confirmation step is crucial to prevent inadvertent or erroneous email dispatches. The `sendEmail` function should only be called after the user has explicitly consented to send the email.
##CHECK USER CONFIRMATION BEFORE CALLING `sendEmail(recipients: list(str), subject: str, body: str, attachments: Optional(str))##

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.recipients]
type = "array"
description = """
recipients (list(str]): The email addresses of the recipients **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.recipients.items]
type = "string"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject line of the email, **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.body]
type = "string"
description = """
body (str): The main content or message of the email, **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.attachments]
type = "array"
description = """
attachments (Optional[list[str]]): Any files or documents attached to the email **EXACTLY** as confirmed in the `writeEmail(recipients: (list[str]), subject: (str), body: (str), attachments: Optional(list[str]))` phase.
"""
[tools.function.parameters.properties.attachments.items]
type = "string"
parameters.required = ["recipients", "subject", "body"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getLocation"
description = """
Gets the users current location.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getDate"
description = """
Gets the local time for the user.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "createCalendarEvent"
description = """
Drafts a calendar event based on the user's input. This function prepares the event details, ensuring accuracy and user consent before saving the event. It is designed to be utilized before saving an event to the calendar.

### !!!Important Note!!! ###
1. **Prerequisite Function**: The `createCalendarEvent` function is a preparatory step for event creation and requires user confirmation before proceeding to save the event.
2. **Suggest Event Creation**: If the user makes related queries, for example in an email, suggest to create an event using this function.
3. **Iterative Process**: If the user requests changes to the event details, adjust the parameters accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the user confirms.

"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
### Parameter ###
`subject (str)`: Specify the event's title or main purpose, as indicated by the user. This parameter is essential for creating the event and must be clearly defined to accurately reflect the event's focus.

### Parameter Description ###
The `subject` parameter is a critical component for event creation, serving as the identifying title or purpose of the event. It should be a concise, descriptive string that encapsulates the essence of the event, provided directly by the user. In instances where the user has not specified a subject, you may need to request additional information or infer the subject based on the context of the user's request.

### Parameter Usage ###
## Direct Request ##
The user explicitly states the event subject.
1. User Inquiry: "Create an event with subject 'Team Meeting' on December 12th, 2024 at 9:00 AM."
2. System Inference: The user requests an event creation for a 'Team Meeting' on December 12th, 2024 at 9:00 AM.
3. Internal Reasoning: 
    A. The user provides a clear subject for the event.
    B. The user specifies a precise date and time for the event.
    C. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: 'December 12th, 2024 at 9:00 AM'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='December 12th, 2024 at 9:00 AM')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
## Indirect Request ##
The user's request implies the event subject without explicitly stating it.
1. User Inquiry: "I need to schedule a meeting with the team on December 12th, 2024 at 9:00 AM."
2. System Inference: The user discusses scheduling a meeting with the team on December 12th, 2024 at 9:00 AM.
3. Internal Reasoning: 
    A. The user wants to create an event to discuss a meeting with the team.
    B. Given the context, infer the subject for the event.
    C. The user specifies a precise date and time for the event.
    D. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'Team Meeting' (Inferred from the user's discussion about meeting with the team.)
    B. `start`: 'December 12th, 2024 at 9:00 AM.'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start='December 12th, 2024 at 9:00 AM.')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
### Parameter ###
`start (str)`: Determine the event's start, based on the user's input. This critical parameter sets the event's beginning in the calendar.

### Parameter Description ###
The `start` parameter is essential for scheduling the event, representing the time when the event is set to begin. It requires a string input provided by the user.

### !!!Important Note!!! ###
**ENTER THE START EXACTLY AS PROVIDED BY THE USER, EVEN IF AMBIGUOUS.**

### Parameter Usage ###
## Start Explicitly Mentioned ##
1. User Inquiry: "Create an event for the English exam next monday at 9:00 AM."
2. System Inference: The user requests an event creation for the English exam next Monday at 9:00 AM.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'next Monday 09:00:00'
5. Function Call: `createCalendarEvent(subject='English exam', start='next Monday 09:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: next Monday at 9:00 AM. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## Start Ambiguously Mentioned ##
1. User Inquiry: "Create an event for the English exam next week."
2. System Inference: The user requests an event creation for the English exam next week without specifying a precise date or time.
3. Internal Reasoning: 
    A. The user's query lacks specific date and time details.
    B. The user's query lacks an end.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'next week'
5. Function Call: `createCalendarEvent(subject='English exam', start='next week')`
6. Example Response: "Your event for the English exam has been created: Start: in one week at 12:00. End: in one week at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## No Start Mentioned ##
1. User Inquiry: "Create an event for the English exam."
2. System Inference: The user requests an event creation for the English exam without specifying a precise date or time.
3. Internal Reasoning: 
    A. The user's query lacks specific date and time details.
    B. The user's query lacks an end.
    C. Default to the current date and time.
    D. Call `getDate()` to obtain the current date and time.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: Current date and time string obtained from `getDate()`.
5. Function Call: `createCalendarEvent(subject='English exam', start='2024-12-12T12:00:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: Not specified. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
### Parameter ###
`end: Optional(str)`: Specify the conclusion time of the event. This parameter is utilized to mark the event's end in the calendar and is optional based on user input.

### Parameter Description ###
The `end` parameter is crucial for defining the duration of an event by indicating when it concludes. It accepts a string that represents the end, which can be explicitly provided by the user or deduced from context. If the user does not specify an end, it may be beneficial to request further clarification or apply a reasonable estimation based on typical event lengths or similar past events.

### !!!Important Note!!! ###
**ENTER THE START EXACTLY AS PROVIDED BY THE USER, EVEN IF AMBIGUOUS.**

### Parameter Usage ###
This parameter is employed by passing a string that denotes the end of the event into the function call. The input should either directly reflect the user's indication or be an informed estimate in the absence of specific details from the user.
## End Explicitly Mentioned ##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 from 12:00 to 14:00."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 from 12:00 to 14:00.
3. Internal Reasoning: 
    A. The user provides a specific end for the event.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'December 12th, 2024 12:00'
    C. `end`: 'December 12th, 2024 14:00'
5. Function Call: `createCalendarEvent(subject='English exam', start='December 12th, 2024 12:00', end='December 12th, 2024 14:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## End Not Mentioned but can be Inferred ##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 at 12:00."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 at 12:00 without specifying an end.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. Estimate the end based on the event type or standard durations.
    D. Exams typically last a couple hours.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'December 12th, 2024 12:00'
    C. `end`: 'December 12th, 2024 14:00' (Estimated based on exam duration)
5. Function Call: `createCalendarEvent(subject='English exam', start='December 12th, 2024 12:00', end='December 12th, 2024 14:00')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## End Not Mentioned and Cannot be Inferred ##
1. User Inquiry: "Create an event for the Marathon."
2. System Inference: The user requests an event creation for the Marathon without specifying a precise date, time, or end.
3. Internal Reasoning: 
    A. The user's query lacks specific date, time, and end details.
    B. Request additional information from the user.
4. User Response: "The Marathon is on December 12th, 2024."
5. System Inference: The user provides a specific start for the Marathon.
6. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The duration of a Marathon varies significantly.
7. Parameter Input:
    A. `subject`: 'Marathon'
    B. `start`: 'December 12th, 2024'
8. Function Call: `createCalendarEvent(subject='Marathon', start='December 12th, 2024')`
9. Example Response: "Your event for the Marathon has been created: Start: December 12th, 2024. Would you like to save it?"
10. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
### Parameter ###
`location (Optional[str])`: Denote the venue or place where the event is scheduled to occur. This parameter, while optional, enriches the event details by providing spatial context.

### Parameter Description ###
The `location` parameter is intended to specify the geographical or virtual location of an event, adding significant value to the event's description within a calendar. It accepts a string input detailing the event's venue, which could range from a physical address to a digital platform link. Incorporating the location is particularly useful for events that require attendees to be at a certain place or to access a specific online meeting room.

### Parameter Usage ###
This parameter should be included in the function call if the user has provided information about where the event will take place. It is utilized by passing a string that represents the event's location, as specified by the user or as can be reasonably determined from the context of their request.

## Location Explicitly Provided ##
1. User Inquiry: "Create an event for the English exam on December 12th, 2024 at 12:00 at the University of Amsterdam."
2. System Inference: The user requests an event creation for the English exam on December 12th, 2024 at 12:00 at the University of Amsterdam.
3. Internal Reasoning: 
    A. The user provides a specific location, and start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
4. Parameter Input:
    A. `subject`: 'English exam'
    B. `start`: 'December 12th, 2024 at 12:00'
    C. `end`: 'December 12th, 2024 at 14:00' (Estimated based on exam duration)
    C. `location`: 'University of Amsterdam'
5. Function Call: `createCalendarEvent(subject='English exam', start='December 12th, 2024 at 12:00', end='December 12th, 2024 at 14:00', location='University of Amsterdam')`
6. Example Response: "Your event for the English exam has been created: Start: December 12th, 2024 at 12:00. End: December 12th, 2024 at 14:00. Location: University of Amsterdam. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## Location Not Provided ##
1. User Inquiry: "Create an event for the Team Meeting on December 12th, 2024 at 9:00 AM."
2. System Inference: The user requests an event creation for the Team Meeting on December 12th, 2024 at 9:00 AM without specifying a location.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
    D. Attempt to obtain the location from context. Meetings are likely to be at the office.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: 'December 12th, 2024 at 9:00 AM'
    C. `end`: ' December 12th, 2024 at 10:00 AM' (Estimated based on meeting duration)
    D. `location`: 'Office' (Inferred from the context)
5. Function Call: `createCalendarEvent(subject='Team Meeting', start=' December 12th, 2024 at 9:00 AM', end=' December 12th, 2024 at 10:00 AM', location='Office')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: December 12th, 2024 at 10:00 AM. Location: Office. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.

## Virtual Location Provided ##
1. User Inquiry: "Create an event for the Team Meeting on December 12th, 2024 at 9:00 AM on Zoom: https//:zoom.com/109435h."
2. System Inference: The user requests an event creation for the Team Meeting on December 12th, 2024 at 9:00 AM on Zoom.
3. Internal Reasoning: 
    A. The user provides a specific start for the event.
    B. The user does not mention an end.
    C. The end can be estimated based on the event type or standard durations.
    D. The location is a virtual platform, Zoom.
    E. Include the Zoom link in the location.
4. Parameter Input:
    A. `subject`: 'Team Meeting'
    B. `start`: 'December 12th, 2024 at 9:00 AM'
    C. `end`: ' December 12th, 2024 at 10:00 AM' (Estimated based on meeting duration)
    D. `location`: 'Zoom: https//:zoom.com/109435h'
5. Function Call: `createCalendarEvent(subject='Team Meeting', start=' December 12th, 2024 at 9:00 AM', end=' December 12th, 2024 at 10:00 AM', location='Zoom: https//:zoom.com/109435h')`
6. Example Response: "Your event for the Team Meeting has been created: Start: December 12th, 2024 at 9:00 AM. End: December 12th, 2024 at 10:00 AM. Location: Zoom: https//:zoom.com/109435h. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
### Parameter ###
`recurrence (Optional[bool])`: Specify whether the event recurs on a regular basis. This parameter, optional but vital for certain types of events, indicates if an event, such as a meeting, class, or routine commitment, repeats periodically.

### Parameter Description ###
The `recurrence` parameter plays a key role in defining the cyclical nature of an event. When set to `True`, it signifies that the event occurs repeatedly according to a defined pattern (e.g., daily, weekly, monthly). This setting is essential for automating the scheduling of regular events, ensuring consistency and reliability in event planning. The parameter accepts a boolean value, with `True` indicating recurrence and `False` or the absence of the parameter indicating a one-time event.

### Parameter Usage ###
Incorporate this parameter into the function call if the user specifies or implies that the event should recur. Utilize a boolean value (`True` or `False`) to reflect the event's recurring status as described by the user.
1. User Inquiry: "Schedule a weekly team meeting every Wednesday at 9:00 AM."
2. System Inference: The user requests the creation of a recurring event for a weekly team meeting.
3. Internal Reasoning: 
    A. The user specifies a start and time.
    B. The user indicates the event should recur weekly.
    C. The user does not mention an end.
    D. The end can be estimated based on the event type or standard durations (meetings typically last approx. 30 minutes).
    E. The location can be inferred from context (e.g., office or conference room).
4. Parameter Input:
    A. `subject`: 'Weekly Team Meeting'
    B. `start`: 'Wednesday at 9:00 AM'
    C. `end`: 'Wednesday at 9:30 AM' (Estimated based on meeting duration)
    D. `location`: 'Office' (Inferred from the context)
    E. `recurrence`: `True`
5. Function Call: `createCalendarEvent(subject='Weekly Team Meeting', start='Wednesday at 9:00 AM', end='Wednesday at 9:30 AM', location='Office', recurrence=True)`
6. Example Response: "Your event for the Weekly Team Meeting has been created: Start: October 5th, 2023 at 9:00 AM. End: October 5th, 2023 at 9:30 AM. Location: Office. Recurrence: Weekly. Would you like to save it?"
7. Listen for User Confirmation: 
    A. If the user confirms, proceed with the `saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function.
    B. If the user requests changes, adjust the event details accordingly and call `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` until the User confirms.
"""
parameters.required = ["subject", "start"]


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "saveCalendarEvent"
description = """
###Function Overview###
Saves the drafted calendar event to the user's calendar. This function is designed to be called after the user has confirmed the event details and is ready to commit the event to their calendar. It serves as the final step in the event creation process, ensuring that the event is accurately recorded and scheduled.

### !!!IMPORTANT NOTE!!! ###
**This function is intended as a follow-up to `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))`, and should only be invoked after receiving user confirmation of the event details.**
##CHECK FOR USER CONFIRMATION BEFORE CALLING saveCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean)).##
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.subject]
type = "string"
description = """
subject (str): The subject **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function 
"""
[tools.function.parameters.properties.start]
type = "string"
description = """
start (str): The start **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.end]
type = "string"
description = """
end (str): The end **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.location]
type = "string"
description = """
location (Optional[str]): The location **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
[tools.function.parameters.properties.recurrence]
type = "boolean"
description = """
recurrence (Optional [bool]): The recurrence status **EXACTLY** as displayed in the `createCalendarEvent(subject: (str), start: (str), end: Optional(str), location: Optional(str), recurrence: Optional(boolean))` function
"""
parameters.required = ["subject", "start"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "getContacts"
description = """
### Function Overview ###
The `getContacts(name: (str))` function serves as a comprehensive tool for accessing a user's contact list, enabling queries both broad and specific. Its utility is especially highlighted in scenarios requiring the identification of contact details based on names rather than email addresses, such as when preparing to send an email. This function can fetch an entire contact list or pinpoint specific contacts, providing vital support for email communication and other contact-related inquiries.

### Parameters ###
- `name (Optional[str])`: An optional parameter to specify the name of a contact. This is particularly useful when the user intends to send an email to a named recipient or is seeking information about a specific person in their contact list. Utilizing this parameter helps in accurately retrieving the required contact details.

### Returns ###
- `contacts (list[str])`: Outputs a list of contact names or email addresses in natural language. If a specific contact is requested, the function will return the best matches (with over 80% similarity) to the provided name. This ensures users can easily identify and utilize the correct contact information for their needs.

### Example Usage ###

## Retrieve Full Contact List ##
1. User Inquiry: "Show me my contacts."
2. System Inference: The user requests an overview of their contact list.
3. Internal Reasoning: 
    A. The user seeks a comprehensive view of their contacts.
    B. No specific contact name is provided.
    C. Retrieve the full contact list.
4. Parameter Input: Not applicable (No specific name provided).
5. Function Call: `getContacts()`
6. Example Response: "Here is your contact list: John Doe, Alex, Sarah, ... (Full list of contacts)."
7. Listen for Further User Actions: 
    A. If the user requests specific details, proceed with the `getContacts(name: (str))` function.
    B. If the user requires additional actions, respond accordingly based on their inquiries.
## Retrieve Specific Contact Details ##
1. User Inquiry: "Get me the contact details for John Doe."
2. System Inference: The user requests specific contact details for John Doe.
3. Internal Reasoning: 
    A. The user seeks information about a particular contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe.
4. Parameter Input: 
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Example Response: "Contact Details for John Doe: Email - John.Doe@outlook.com, Phone - 123-456-7890."
7. Listen for Further User Actions: 
    A. If the user intends to send an email, proceed with the email composition process.
    B. If the user requires additional information or actions, respond accordingly based on their inquiries.

## Implicit Contact Retrieval for Email Composition ##
1. User Inquiry: "Send an email to John Doe."
2. System Inference: The user requests to send an email to John Doe.
3. Internal Reasoning: 
    A. The user intends to compose an email to a specific contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe to facilitate email composition.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Continue with the email composition process using the obtained contact details.

### Integration with User Actions: Email Composition ###
- For email tasks, follow a structured approach:
    1. Retrieve the desired contact's email by specifying their name.
    2. Use the obtained email address in the email composition step.
    3. Confirm the details with the user before sending the email to ensure accuracy and user satisfaction.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.name]
type = "string"
description = """
### Parameter ###
`name (Optional[str])`: This parameter is utilized to specify the name of a contact when the user seeks information about a specific individual or intends to send an email to a named recipient. It plays a crucial role in precisely identifying and retrieving contact details from the user's contact list.

### Parameter Description ###
The `name` parameter assists in narrowing down the search within the user's contact list to find specific contact details, especially useful in email communication scenarios. When a user mentions a specific name, this parameter helps fetch the exact contact information, such as an email address, corresponding to the provided name. It is designed to ensure that actions like sending emails are directed to the correct recipient. In situations where multiple contacts match the provided name, the system may prompt the user for further specification or automatically select the most relevant match.

### Parameter Usage ###
To utilize this parameter effectively, input the contact's name as a string when invoking the function. This is particularly important when the user's request involves a specific individual, either for gathering contact information or for targeting email communication.

### Examples ###

## Direct Request for a Specific Contact ##
1. User Inquiry: "Get me the contact details for John Doe."
2. System Inference: The user requests specific contact details for John Doe.
3. Internal Reasoning:
    A. The user seeks information about a particular contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Example Response: "Contact Details for John Doe: Email - John.Doe@outlook.com, Phone - 123-456-7890."
7. Listen for Further User Actions:
    A. If the user intends to send an email, proceed with the email composition process.
    B. If the user requires additional information or actions, respond accordingly based on their inquiries.

## Implicit Contact Retrieval for Email Composition ##
1. User Inquiry: "Send an email to John Doe."
2. System Inference: The user requests to send an email to John Doe.
3. Internal Reasoning:
    A. The user intends to compose an email to a specific contact.
    B. The name 'John Doe' is provided.
    C. Retrieve the contact details for John Doe to facilitate email composition.
4. Parameter Input:
    A. `name`: 'John Doe'
5. Function Call: `getContacts(name='John Doe')`
6. Continue with the email composition process using the obtained contact details.

## Handling Multiple Matches ##
1. User Inquiry: "Send an email to Bob."
2. System Inference: The user intends to send an email to a contact named Bob.
3. Internal Reasoning:
    A. The user intends to communicate with a contact named Bob.
    B. The name 'Bob' is provided.
    C. Retrieve the contact details for Bob to facilitate email composition.
4. Parameter Input:
    A. `name`: 'Bob'
5. Function Call: `getContacts(name='Bob')`
    A. If multiple contacts match the name 'Bob', prompt the user for further clarification.
    B. If a single match is found, proceed with the email composition process.
6. Listen for User Clarification:
    A. If the user specifies the intended contact, proceed with the email composition.
    B. If further assistance is needed, provide additional support based on the user's input.
"""


########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "findFile"
description = """
### Function Overview ###
The `findFile(filename: Optional[str])` function is designed to search for and return the unique identifier (file_id) associated with a specified filename. This identifier is critical for accurately locating and accessing files within the system's filesystem before conducting any file manipulations or data analyses. The function plays a key role in ensuring that operations are performed on the correct file by providing a safe and precise method for file identification.

### !!!IMPORTANT NOTE!!! ###
1. This function does not open the file but solely returns the file_id, which is essential for subsequent file operations.
2. The file_id should not be displayed to the user but used internally by the `code_interpreter` for file handling tasks.
3. The function is a preliminary step in file operations, ensuring that file-related actions are executed on the intended file.
4. The file_id is the only method to locate and access files within the filesystem.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.filename]
type = "string"
description = """
### Parameter ###
`filename: Optional(str)`: This parameter specifies the name of the file that needs to be located within the system, as explicitly mentioned by the user.

### Parameter Description ###
The `filename` parameter is essential for identifying and locating a specific file within the filesystem based on the user's request. It requires a string input representing the exact name of the file of interest, excluding any internal file identifiers or paths known to the system. This approach ensures that the search and subsequent operations are aligned with the user's intentions and that the correct file is targeted for any analysis or manipulation.

### Parameter Usage ###
## Filename specified by the User ##
To utilize this parameter effectively, input must be a string that corresponds to the name of the file as described by the user. It is crucial that this name matches the user's specification to ensure the subsequent retrieval of the correct file_id for the intended file.
1. User Inquiry: "What was the average revenue for the year 2023 in 'finance.csv'?"
2. System Inference: The user requests data analysis on the file `finance.csv` for revenue calculation.
3. Internal Reasoning:
    A. The user specifies the filename `finance.csv`.
    B. The system needs to locate the file to extract the necessary data.
4. Parameter Input:
    A. `filename`: 'finance.csv'
5. Function Call: `findFile(filename='finance.csv')`
    A. The function returns the file_id associated with `finance.csv`. This file_id is crucial for subsequent data analysis operations.
    B. This is an implicit step in the data analysis process, ensuring that the correct file is accessed for revenue calculation.
6. Proceed with data analysis operations using the obtained file_id.
7. Use `code_interpreter` tool to manipulate and analyze the data within the specified file.
8. Example Response: The average revenue for the year 2023 in `finance.csv` is $X.

## Filename Not Specified ##
If the user does not specify a filename, the function will return the most recently uploaded file_id. This scenario is useful when the user intends to work with the latest file without explicitly mentioning its name.
1. User Inquiry: "Describe this image"
2. System Inference: The user requests a description of the most recently uploaded image.
3. Internal Reasoning: 
    A. The user does not specify a filename.
    B. The system needs to access the most recently uploaded file for description.
    C. The only way to access files is through their unique file_id.
    D. The system must call `findFile(filename: str)` to obtain the file_id for `finance.csv`.
4. Parameter Input: Not applicable (No filename specified).
5. Function Call: `findFile()`
6. The function returns the file_id of the most recently uploaded file, enabling the system to describe the image accurately.
7. Example Response: "The image depicts a serene landscape with a clear blue sky and lush greenery."
"""


[[tools]]
type = "function"
[tools.function]
name = "webViewer"
description = """
Returns the content of a webpage given its URL. This function is designed to extract the primary content from a website, providing a concise summary or overview of the site's current data. It is a valuable tool for addressing user queries that require real-time web content access, enhancing the ability to respond effectively to inquiries involving current events or specific web content.

### !!!IMPORTANT NOTE!!! ###
1. This function is intended to extract content from websites and present it in a concise form for user consumption.
2. The extracted content should reflect the primary information or content found on the web page, providing a summary or overview of the site's current data.
3. The function is a valuable resource for addressing user queries that require real-time web content access, enhancing the ability to respond effectively to inquiries involving current events or specific web content given a URL.

### When to Call the Function ###
- This function should be invoked in situations requiring real-time data from a website, such as when a user seeks the latest news, articles, or specific web-based information given a URL.
- It serves as the preliminary step in addressing queries that necessitate web content access, ensuring that the response is grounded in the most current information available online.
- Before concluding that accessing real-time data is not possible, employ this function as an attempt to fulfill the user's request.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.url]
type = "string"
description = """
### Parameter ###
`url (str)`: The web address of the site from which content is to be retrieved.

### Parameter Description ###
The `url` parameter requires a full, valid URL as a string input. This URL should direct to the website or specific web page the user is interested in extracting text from. It is essential for accessing real-time information or summarizing content available on the web, serving as the critical link between the user's request and the data retrieval process.

### Parameter Usage ###
This parameter is utilized by entering the complete web address of the site in question when invoking the function. It enables the function to accurately locate and access the desired web page, ensuring that the retrieved text content matches the user's request for information or summary.
1. User Query: "Summarize the content of 'https://www.cnn.com'?"
2. System Inference: The user seeks to summarize the content of 'https://www.cnn.com'.
3. Internal Reasoning:
    A. The user specifies the website URL 'https://www.cnn.com'.
    B. The system needs to extract the content from the CNN website.
    C. The system can extract the content using `webViewer(url='https://www.cnn.com')`.
4. Parameter Input:
    A. `url`: 'https://www.cnn.com'
5. Function Call: `webViewer(url='https://www.cnn.com')`
6. Example Response: "The content of CNN is..."
"""
parameters.required = ["url"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "dataQuery"
description = """
Allows the system to query the web for real-time data based on user inquiries. This function leverages Wolfram Alpha's extensive knowledge base to retrieve precise and relevant information, ensuring that the responses are current and accurate. It is a powerful tool for addressing user inquiries that necessitate up-to-date data, scientific explanations, mathematical solutions, or general knowledge beyond the agent's knowledge cutoff date.

### !!!IMPORTANT NOTE!!! ###
1. This function leverages Wolfram Alpha's extensive knowledge base to retrieve precise and relevant information based on user queries, ensuring that the responses are current and accurate.
2. The function is designed to facilitate real-time data retrieval and analysis, enabling users to access the latest information available on the web through Wolfram Alpha's API.
3. It is a powerful tool for addressing user inquiries that necessitate up-to-date data, scientific explanations, mathematical solutions, or general knowledge beyond the agent's knowledge cutoff date.

### When to Call the Function ###
-This function should be utilized for queries seeking information that is contemporary or beyond the agent's last update.
-It is ideal for situations where users require precise, current data on topics such as demographics, scientific concepts, mathematical problems, or any content that necessitates access to Wolfram Alpha's extensive database.

### Example Usage ###
## General Knowledge Query ##
1. User Query: "What are the 1 most recent nations."
2. System Inference: The user seeks information about the 10 most recent nations.
    A. This is a general knowledge query.
    B. The system recognizes the need for up-to-date information.
    C. The system recognizes that nations might have formed past the agent's knowledge cutoff date.
    D. The system can obtain up-to-date information using `dataQuery(query: (str))`.
3. Internal Reasoning:
    A. The user inquires about the 10 most recent nations.
    B. The system may attempt to use its internal knowledge base but may not have the most recent information.
    C. The system recognizes the need to query the web for up-to-date information.
    D. The system needs to query the web for up to date information on the the 10 most recent nations.
    E. The system can obtain up-to-date information using `dataQuery(query: (str))`.
4. Parameter Input:
    A. `query`: "10 most recent nations"
5. Function Call: `dataQuery(query="10 most recent nations")`
6. Example Response: "The 10 most recent nations are..."

## Mathematical Query ##
1. User Query: "Solve the equation x^2 + 4x + 4 = 0."
2. System Inference: The user requests a solution to the quadratic equation.
3. Internal Reasoning:
    A. The user presents a quadratic equation for solution.
    B. The system recognizes the need for a mathematical solution.
    C. The system can solve the equation using `dataQuery(query: (str))`.
    D. The system must convert the equation to Markdown format for accurate processing.
4. Parameter Input:
    A. `query`: "$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$"
5. Function Call: `dataQuery(query="$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$")`
6. Example Response: "The solution to the equation x^2 + 4x + 4 = 0 is x = -2."
7. Follow up: `query_results` can be used to provide additional details or steps if needed.

## Scientific Query ##
1. User Query: "Does the derivation of centripetal acceleration from the gravity potential assume an inertial frame of reference?"
2. System Inference: The user seeks clarification on the derivation of centripetal acceleration.
    A. This is a highly technical scientific query.
    B. The system recognizes the need for a scientific explanation.
    C. The system recognizes it can give the best explanation using `dataQuery(query: (str))`.
3. Internal Reasoning:
    A. The user inquires about the derivation of centripetal acceleration.
    B. The system recognizes the need for a scientific explanation.
    C. The system can provide an explanation using `dataQuery(query: (str))`.
    D. The system must ensure the query is accurately formulated in English.
4. Parameter Input:
    A. `query`: "Derivation of centripetal acceleration from gravity potential"
5. Function Call: `dataQuery(query="Derivation of centripetal acceleration from gravity potential")`
6. Example Response: "The derivation of centripetal acceleration from the gravity potential does not assume an inertial frame of reference."
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.query]
type = "string"
description = """
### Parameter ###
`query (str)`: The specific inquiry or request to be sent to Wolfram Alpha via the `dataQuery(query:str)` function.

### Parameter Description ###
The `query` parameter is the centerpiece of the `dataQuery(query:str)` function, representing the user's question or topic of interest that is to be explored using Wolfram Alpha's API. This parameter should encapsulate the essence of the user's request in English, and when applicable, include mathematical expressions formatted in Markdown syntax. The clarity and specificity of the query are paramount in ensuring that the returned data is as relevant and accurate as possible.

### Parameter Usage ###
To utilize this parameter, input should be a concise, well-phrased string that directly translates the user's intent or question into a format understandable by the Wolfram Alpha API. This may involve simplifying or refining the user's original query to meet the API's requirements while retaining the query's original purpose.
## General Knowledge Query ##
1. User Query: "What is the capital of France?"
2. System Inference: The user seeks information about the capital of France.
3. Internal Reasoning:
    A. The user inquires about the capital of France.
    B. The system recognizes the need to query the web for this information.
    C. The system can query the web using `dataQuery(query:str)`.
4. Parameter Input:
    A. `query`: "capital of France"
5. Function Call: `dataQuery(query="capital of France")`
6. Example Response: "The capital of France is Paris."
## Mathematical Query ##
1. User Query: "Solve the equation x^2 + 4x + 4 = 0."
2. System Inference: The user requests a solution to a quadratic equation.
3. Internal Reasoning:
    A. The user presents a quadratic equation for solution.
    B. The system recognizes the need for a mathematical solution.
    C. The system can solve the equation using `dataQuery(query: (str))`.
    D. The system must convert the equation to Markdown format for accurate processing.
4. Parameter Input:
    A. `query`: "$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$"
5. Function Call: `dataQuery(query="$$\\nSolve the equation x^2 + 4x + 4 = 0.\\n$$")`
6. Example Response: "The solution to the equation x^2 + 4x + 4 = 0 is x = -2."
7. Follow-up: `query_results` can be used to provide additional details or steps if needed.
## Scientific Query ##
1. User Query: "What are the 10 densest elemental metals?"
2. System Inference: The user seeks information about the densest elemental metals.
3. Internal Reasoning:
    A. The user requests the 10 densest elemental metals.
    B. The system recognizes the need for scientific data.
    C. The system can provide the information using `dataQuery(query: (str))`.
4. Parameter Input:
    A. `query`: "10 densest elemental metals"
5. Function Call: `dataQuery(query="10 densest elemental metals")`
6. Example Response: "The 10 densest elemental metals are..."

### Process Flow ###
1. Recognize the user's request for real-time data or information beyond the agent's knowledge cutoff date.
2. Acknowledge the need to access Wolfram Alpha's API for querying the web and retrieving up-to-date data.
3. Formulate the user's query in English, ensuring precision and adherence to formatting guidelines.
4. Submit the query to the `dataQuery(query: (str))` function for processing and data retrieval.
5. Present the query results in a clear and concise manner, focusing on the key details relevant to the user's request.
6. Provide additional details or steps if necessary based on the user's inquiry or follow-up questions.

### Best Practices ###
Utilizing the `dataQuery(query: (str))` function effectively broadens the agent's capability to furnish users with accurate, up-to-date information, leveraging Wolfram Alpha's comprehensive knowledge base to meet and exceed user expectations in real-time data retrieval and analysis.
`dataQuery(query:str)` understands natural language queries about entities in chemistry, physics, geography, history, art, astronomy, and more.
-`dataQuery(query:str)` performs mathematical calculations, date and unit conversions, formula solving, etc.
-Convert inputs to simplified keyword queries whenever possible (e.g. convert "how many people live in France" to "France population").
-Send queries in English only; translate non-English queries before sending, then respond in the original language.
-Display image URLs with Markdown syntax: ![URL]
-ALWAYS use this exponent notation: `6*10^14`, NEVER `6e14`.
-`query` must ONLY be a single-line string.
-ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '\\( [expression] \\)' when inline.
-Never mention your knowledge cutoff date; `dataQuery(query:str)` may return more recent data.
-Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1).
-Use named physical constants (e.g., 'speed of light') without numerical substitution.
-Include a space between compound units (e.g., "Ω m" for "ohm*meter").
-To solve for a variable in an equation with units, consider solving a corresponding equation without units; exclude counting units (e.g., books), include genuine units (e.g., kg).
-If data for multiple properties is needed, make separate calls for each property.
-If a `dataQuery(query:str)` result is not relevant to the query:
    -If `dataQuery(query:str)` provides multiple 'Assumptions' for a query, choose the more relevant one(s) without explaining the initial result. If you are unsure, ask the user to choose.
    -Re-send the exact same 'input' with NO modifications, and add the 'assumption' parameter, formatted as a list, with the relevant values.
    -ONLY simplify or rephrase the initial query if a more relevant 'Assumption' or other input suggestions are not provided.
    -Do not explain each step unless user input is needed. Proceed directly to making a better API call based on the available assumptions.
"""
parameters.required = ["query"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "webQuery"
description = """
Allows the system to query the web for real-time data based on user inquiries. This function leverages You API's real-time data to retrieve precise and relevant information based on user queries, ensuring that the responses are current and accurate. It is a powerful tool for addressing user inquiries that necessitate up-to-date data, news, and events beyond the agent's knowledge cutoff date.
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.query]
type = "string"
description = """
### Parameter ###
The inferred query from the user that needs to be sent to the You API for real-time data retrieval.
"""
parameters.required = ["query"]



########################################################################################################################################################################################################################



[[tools]]
type = "function"
[tools.function]
name = "vision"
description = """
Gives a detailed analysis of an image to identify objects and provide a description. This function is designed to analyze images and extract meaningful information, descriptions, and insights based on visual content. It utilizes advanced image recognition technologies to interpret images and provide relevant data to users, enhancing their understanding of visual content. It is a valuable tool for addressing user inquiries that involve image analysis, object recognition, and content interpretation, bridging the gap between visual data and actionable insights.

### !!!IMPORTANT NOTE!!! ###
1. This function is intended to analyze images and extract meaningful information, descriptions, and insights based on visual content.
2. The function utilizes advanced image recognition technologies to interpret images and provide relevant data to users, enhancing their understanding of visual content.
3. It is a valuable tool for addressing user inquiries that involve image analysis, object recognition, and content interpretation, bridging the gap between visual data and actionable insights.

### When to Call the Function ###
-This function should be invoked when users require detailed analysis, descriptions, or insights based on visual content within images.
-It is ideal for situations where users seek to extract information, identify objects, or gain insights from images that may contain relevant data or content.

### Example Usage ###
1. User Query: "Analyze image.jpg to identify the objects and provide a description."
2. System Inference: The user requests an analysis of the image to identify objects and provide a description.
3. Internal Reasoning:
    A. The user seeks to analyze the image for object identification and description.
    B. The system recognizes the need for image processing and interpretation.
    C. The system can analyze the image using `vision(file_id: (str), query: (str))`.
        i. The `file_id` is essential for locating and processing the image.
        ii. The system can obtain the `file_id` through the `findFile(filename: Optional[str])` function.
4. Parameter Input:
    A. `file_id`: The unique identifier associated with the image file.
        i. This is obtained through the `findFile(filename="image.png")` function.
    B. `query`: "Identify objects and provide a description."
5. Function Call: `vision(file_id=`file_id`, query="Identify objects and provide a description.")`
6. Example Response: "The image contains a car, a tree, and a building. The scene appears to be a city street with traffic."
"""
[tools.function.parameters]
type = "object"
[tools.function.parameters.properties.file_id]
type = "string"
description = """
### Parameter ###
`file_id (str)`: The unique identifier associated with the image file to be analyzed.

### Parameter Description ###
The `file_id` parameter is a critical component of the `vision(file_id: (str), query: (str))` function, serving as the unique identifier associated with the image file targeted for analysis. This identifier enables the system to locate and process the specified image accurately, ensuring that the analysis and interpretation are performed on the correct visual content.

### Parameter Usage ###
To utilize this parameter effectively, the `file_id` must be obtained through the `findFile(filename: Optional[str])` function, which maps the user-specified image filename to its corresponding unique identifier within the system. This process ensures that the correct image is selected for analysis, providing accurate insights and descriptions based on the visual content.

## Example ##
1. User Query: "Analyze image.jpg to identify the objects and provide a description."
2. System Inference: The user requests an analysis of the image to identify objects and provide a description.
3. Internal Reasoning:
    A. The user seeks to analyze the image for object identification and description.
    B. The system recognizes the need for image processing and interpretation.
    C. The system can analyze the image using `vision(file_id: (str), query: (str))`.
        i. The `file_id` is essential for locating and processing the image.
        ii. The system can obtain the `file_id` through the `findFile(filename: Optional[str])` function.
4. Parameter Input:
    A. `file_id`: The unique identifier associated with the image file.
        i. This is obtained through the `findFile(filename="image.png")` function.
    B. `query`: "Identify objects and provide a description."
5. Function Call: `vision(file_id=`file_id`, query="Identify objects and provide a description.")`
6. Example Response: "The image contains a car, a tree, and a building. The scene appears to be a city street with traffic."
"""
[tools.function.parameters.properties.query]
type = "string"
description = """
### Parameter ###
`query (str)`: A concise, well-formulated query based on the user's request.

### Parameter Description ###
The `query` parameter is an essential element of the `vision(file_id: (str), query: (str))` function, representing the user's specific inquiry or request related to the image analysis. This query should be structured to convey the user's intent clearly and precisely, enabling the system to extract relevant information, identify objects, and provide descriptions based on the visual content within the image.

### Parameter Usage ###
When utilizing this parameter, the `query` should be formulated in English, reflecting the user's request for object identification, information extraction, or detailed descriptions based on the visual content within the image. The query serves as the guiding directive for the image analysis process, ensuring that the results align with the user's expectations and requirements.

## Example ##
1. User Query: "Analyze image.jpg to identify the objects and provide a description."
2. System Inference: The user requests an analysis of the image to identify objects and provide a description.
3. Internal Reasoning:
    A. The user seeks to analyze the image for object identification and description.
    B. The system recognizes the need for image processing and interpretation.
    C. The system can analyze the image using `vision(file_id: (str), query: (str))`.
        i. The `file_id` is essential for locating and processing the image.
        ii. The system can obtain the `file_id` through the `findFile(filename: Optional[str])` function.
4. Parameter Input:
    A. `file_id`: The unique identifier associated with the image file.
        i. This is obtained through the `findFile(filename="image.png")` function.
    B. `query`: "Identify objects and provide a description."
5. Function Call: `vision(file_id=`file_id`, query="Identify objects and provide a description.")`
6. Example Response: "The image contains a car, a tree, and a building. The scene appears to be a city street with traffic."
"""
parameters.required = ["file_id", "query"]

[[file_bundles]]
bundle_name = "source-code"
src_dir = "../src"
src_globs = ["**/*.py"]
dst_ext = "py"

[[file_bundles]]
bundle_name = "memory"
src_dir = "../agent"
src_globs = ["**/*.json"]
dst_ext = "json" 

[[file_bundles]]
bundle_name = "images"
src_dir = "../files"
src_globs = ["*.png", "*.jpg", "*.jpeg"]
dst_ext = "img"

[[file_bundles]]
bundle_name = "data"
src_dir = "../files"
src_globs = ["*.csv", "*.xlsx"]
dst_ext = "data"

[[file_bundles]]
bundle_name = "documents"
src_dir = "../files"
src_globs = ["*.pdf", "*.docx", "*.txt", "*.md", "*.doc", "*.pptx", "*.ppt", "*.xls", "*.xlsx", "*.csv", "*.json", "*.xml", "*.yaml", "*.yml", "*.html", "*.htm", "*.rtf", "*.odt", "*.ott", "*.ods", "*.ots", "*.odp", "*.otp", "*.py", "*.java", "*.js", "*.ts", "*.c", "*.cpp", "*.h", "*.hpp", "*.css", "*.scss", "*.less", "*.sql", "*.php", "*.rb", "*.pl", "*.sh", "*.bash", "*.ps1", "*.bat", "*.cmd", "*.r", "*.rmd", "*.ipynb", "*.json", "*.yaml", "*.yml", "*.tsv"]
dst_ext = "documents"